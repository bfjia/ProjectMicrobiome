library(phyloseq)
devtools::install_github("jbisanz/qiime2R")
install.p
install
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("jbisanz/qiime2R")
devtools::install_github("jbisanz/qiime2R")
library("devtools")
install.packages("devtools")
devtools::install_github("jbisanz/qiime2R")
install.packages(yaml)
install.packages("yaml")
install.packages("yaml")
install.packages("devtools")
devtool
library(tidyverse)
install.packa
install.packages(tidyverse)
install.packages("tidyverse")
devtools::install_github("jbisanz/qiime2R")
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R)
metadata = read_tsv("D:\OneDrive\Desktop\_Beluga\Beluga\workflow.p1p2\phyloseq\p1p2metadataUTF8.tsv")
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv")
metadata
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv", na = 0)
metadata
featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza")
featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza")
featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp")
featureTable$data
taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza")
taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp")
taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = "; ", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp")
taxonomy$data
taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = "; ", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
taxtable
taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
taxtable
tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza")
tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp")
shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza")
tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp")
shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp")
pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp")
shannon$data %>%   as.data.frame() %>%   rownames_to_column("#SampleID") %>%   left_join(metadata) %>%   mutate(DaysSinceExperimentStart = as.numeric(DaysSinceExperimentStart)) %>% #coerce this to be stored as number ggplot(aes(x = DaysSinceExperimentStart, y = shannon, group = Subject, color = BodySite, shape = ReportedAntibioticUsage)) +     geom_point(size = 4) +     geom_line() +     facet_grid(BodySite ~ Subject) + #plot body sites across rows and subjects across columns theme_bw() +     xlab("Time (days)") +     ylab("Shannon Diversity") +     ggtitle("Shannon diversity across time")
shannon$data %>%   as.data.frame() %>%   rownames_to_column("#SampleID") %>%   left_join(metadata) %>%   mutate(DaysSinceExperimentStart = as.numeric(DaysSinceExperimentStart)) %>% #coerce this to be stored as number shannon$data %>%   as.data.frame() %>%   rownames_to_column("#SampleID") %>%   left_join(metadata) %>%   mutate(DaysSinceExperimentStart = as.numeric(DaysSinceExperimentStart))
colnames(featureTable$data)
phyloseqObj = qza_to_phyloseq("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv")
phyloseqObj = qza_to_phyloseq("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv")
phyloseqObj = qza_to_phyloseq("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv")
phyloseqObj = qza_to_phyloseq(featureTable, tree, taxonomy, metadata)
colnames(metadata)
colnames(taxonomy$data)
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv", na = 0) colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv", na = 0)
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv")
, na = 0
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv", na = 0)
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv")
colnames(metadata)
featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp")
colnames(featureTable$data)
taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp")
colnames(taxonomy$data)
taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
taxtable
tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp")
shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp")
pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj
colnames(metadata)
p <- plot_anova_diversity(physeq, method = c("richness", "simpson", "shannon"),     grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05) print(p)
library("phyloseq")
    grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05)
p <- plot_anova_diversity(physeq, method = c("richness", "simpson", "shannon"), grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05)
install_github("umerijaz/microbiomeSeq")
devtools:install_github("umerijaz/microbiomeSeq")
devtools:install_github("umerijaz/microbiomeSeq")
library(devtools)
devtools:install_github("umerijaz/microbiomeSeq")
devtools:install_github("umerijaz/microbiomeSeq")
library(devtools)
install_github("umerijaz/microbiomeSeq")
install.packa
install.packages("DeSeq2")
install.packages("DESeq2")
source("https://bioconductor.org/biocLite.R") biocLite("DESeq2")
install_github("umerijaz/microbiomeSeq")
library(dev)
library(devtools)
install_github("umerijaz/microbiomeSeq")
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
library(microbiomeSeq)
colnames(metadata)
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05)
print(p)
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05)
phyloseqObj
taxa_are_rows(phyloseqObj)
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj taxa_are_rows(phyloseqObj) p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05) p = plot_richness(phyloseqObj, x="Weightanalyzed(mg)", color="Weightanalyzed(mg)", measures = "Chaos1", title = "alpha div") print(p)
p = plot_richness(phyloseqObj, x="Weightanalyzed(mg)", color="Weightanalyzed(mg)", measures = "Chaos1", title = "alpha div")
taxa_are_rows(phyloseqObj)
phyloseqObj = t(phyloseqObj)
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05)
phyloseqObj
phyloseqObj = t(phyloseqObj)
phyloseqObj
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05)
phyloseqObj = t(phyloseqObj)
phyloseqObj
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Weightanalyzed(mg)", pValueCutoff = 0.05)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj
physeq <- normalise_data(phyloseqObj, norm.method = "relative")
physeq <- normalise_data(phyloseqObj, norm.method = "relative") p <- plot_taxa(physeq, grouping_column = "Weightanalyzed(mg)", method = "hellinger", number.taxa = 21, filename = NULL) print(p)
p <- plot_taxa(physeq, grouping_column = "Weightanalyzed(mg)", method = "hellinger", number.taxa = 21, filename = NULL)
physeq <- normalise_data(phyloseqObj, norm.method = "relative")
p <- plot_taxa(physeq, grouping_column = "Weightanalyzed(mg)", method = "hellinger", number.taxa = 21, filename = NULL)
library(microbiomeSeq)
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Sex", pValueCutoff = 0.05)
phyloseqObj = t(phyloseqObj)
taxa_are_rows(phyloseqObj)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj
taxa_are_rows(phyloseqObj)
phyloseqObj = t(phyloseqObj)
taxa_are_rows(phyloseqObj)
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Sex", pValueCutoff = 0.05)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj
taxa_are_rows(phyloseqObj)
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Sex", pValueCutoff = 0.05)
phyloseqObj = t(phyloseqObj)
phyloseqObj
p = plot_anova_diversity(phyloseqObj, method = c("richness", "simpson", "shannon"), grouping_column = "Sex", pValueCutoff = 0.05)
p = plot_richness(phyloseqObj, x="Weightanalyzed(mg)", color="Weightanalyzed(mg)", measures = "Chaos1", title = "alpha div")
print(p)
physeq <- normalise_data(phyloseqObj, norm.method = "relative")
p <- plot_taxa(physeq, grouping_column = "Weightanalyzed(mg)", method = "hellinger", number.taxa = 21, filename = NULL)
print(p)
print(p)
p <- plot_anova_env(physeq, grouping_column = "Sex", select.variables = c("BDE7","Weightanalyzed(mg)"))
taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
colnames(taxonomy$data)
taxtable
tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp")
tree$data
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj
plot_tree(phyloseqObj)
plot_tree(phyloseqObj, color="Domain")
plot_tree(phyloseqObj, color="Domain")
phyloseqObj$otu_table
view(phyloseqObj$otu_table)
plot_tree(phyloseqObj, color="Sample")
plot_tree(phyloseqObj, color="Phylum")
?plot_tree
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
plot_tree(phyloseqObj, color="Phylum")
plot_bar(phyloseqObj, fill = "Phylum")
plot_bar(phyloseqObj, fill = "Genus")
plot_bar(phyloseqObj, fill = "Genus")
plot_bar(phyloseqObj, fill = "Order")
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
plot_bar(phyloseqObj_percent, fill = "Phylum") + geom_bar(aes(fill=Phylum), stat="identity")
plot_bar(phyloseqObj_percent, fill = "Order") + geom_bar(aes(fill = Order), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Genus") + geom_bar(aes(fill = Genus), stat = "identity")
library(DESeq2)
deseq1obj = phyloseq_to_deseq2(phyloseqObj)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ DIAGNOSIS)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Sex)
diagdds = DESeq(diagdds, test = "Wald", fitType = "parametric")
diagdds = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Sex)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ 1)
diagdds = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
diagdds = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
diagdds = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
res = results(deseq1obj, cooksCutoff = FALSE)
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(diagdds), 1, gm_mean)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, fitType = "local")
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha),]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(deseq1obj)[rownames(sigtab),], "matrix"))
head(sigtab)
sigtab
tax_table(deseq1obj)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
tax_table(phyloseqObj)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
tax_table(phyloseqObj)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
tax_table(phyloseqObj)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, fitType = "local")
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
tax_table(deseq1obj)
tax_table(deseq1obj)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
deseq1obj
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
deseq1obj
tax_table(phyloseqObj) = otu_table(taxtable, taxa_are_rows = TRUE)
tax_table(phyloseqObj) = tax_table(taxtable, taxa_are_rows = TRUE)
tax_table(phyloseqObj) = tax_table(taxtable)
tax_table(phyloseqObj) = tax_table(taxtable)
taxtable
tax_table(phyloseqObj) = tax_table(taxonomy$data)
taxtable
taxonomy$data
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
tax_table(phyloseqObj) = tax_table(taxonomy$data)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha),]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))
head(sigtab)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea) gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) } geoMeans = apply(counts(deseq1obj), 1, gm_mean) deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans) deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha),]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))
tax_table(phyloseqObj)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea) gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) } geoMeans = apply(counts(deseq1obj), 1, gm_mean) deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans) deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric") res = results(deseq1obj, cooksCutoff = FALSE) alpha = 0.01 sigtab = res[which(res$padj < alpha),] tax_table(phyloseqObj) sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix")) head(sigtab) sigtab
sigtab
sigtab
res = results(deseq1obj, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha),]
sigtab
res
alpha = 0.5
sigtab = res[which(res$padj < alpha),]
sigtab
alpha = 0.5
sigtab = res[which(res$padj < alpha),]
sigtab
res
alpha = 0.9
sigtab = res[which(res$padj < alpha),]
sigtab
tax_table(phyloseqObj)
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))
head(sigtab)
sigtab
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
plot_bar(phyloseqObj_percent, fill = "Genus") + geom_bar(aes(fill = Genus), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Domain") + geom_bar(aes(fill = Domain), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Kingdom") + geom_bar(aes(fill = Kingdom), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum") + geom_bar(aes(fill = Phylum), stat = "identity")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
plot_bar(phyloseqObj_percent, fill = "Phylum") + geom_bar(aes(fill = Phylum), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "Sex") + geom_bar(aes(fill = Phylum), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleorControl") + geom_bar(aes(fill = Phylum), stat = "identity")
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleorControl") + geom_bar(aes(fill = Phylum), stat = "identity")
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) library(DESeq2)
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleorControl") + geom_bar(aes(fill = Phylum), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource") + geom_bar(aes(fill = Phylum), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource") + geom_bar(aes(fill = Phylum), stat = "identity") + opts(title = "width = .5")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid=~Sex) + geom_bar(aes(fill = Phylum), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleorControl", facet_grid=~Sex) + geom_bar(aes(fill = Phylum), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "Sex", facet_grid=~SampleSource) + geom_bar(aes(fill = Phylum), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid=~Sex) + geom_bar(aes(fill = Phylum), stat = "identity")
 = 0.75), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(x = Family, y = Abundance, fill = Phylum, width = 0.75), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(x = SampleSource, y = Abundance, fill = Phylum, width = 0.75), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(x = SampleSource, y = Abundance, fill = Phylum, width = 0.75, size = 3), stat = "identity")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid = SamplingArea ~ Sex) + geom_bar(aes(x = SampleSource, y = Abundance, fill = Phylum, width = 0.75), stat = "identity", position = "stack")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid = SamplingArea ~ Sex) + geom_bar(aes(fill = Phylum, width = 0.75), stat = "identity", position = "stack")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid = SamplingArea ~ Sex) + geom_bar(aes(fill = Phylum, width = 0.75), stat = "identity", position = "stack")
plot_bar(phyloseqObj_percent, fill = "Phylum", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Phylum, width = 0.75), stat = "identity", position = "stack")
plot_bar(phyloseqObj_percent, fill = "Genus", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Genus, width = 0.75), stat = "identity", position = "stack")
plot_bar(phyloseqObj_percent, fill = "Genus", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Genus, width = 0.75), stat = "identity", position = "stack")
plot_bar(phyloseqObj_percent, fill = "Order", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Order, width = 0.75), stat = "identity", position = "stack")
plot_bar(phyloseqObj_percent, fill = "Order", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Order, width = 0.75), stat = "identity", position = "stack")
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
res
alpha = 0.05
sigtab = res[which(res$padj < alpha),]
sigtab
tax_table(phyloseqObj)
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))
head(sigtab)
sigtab
theme_set(theme_bw()) scale_fill_discrete <- function(palname = "Set1", ...) {     scale_fill_brewer(palette = palname, ...) } # Phylum order x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x)) x = sort(x, TRUE) sigtab$Phylum = factor(as.character(sigtab$Phylum), levels = names(x)) # Genus order x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x)) x = sort(x, TRUE) sigtab$Genus = factor(as.character(sigtab$Genus), levels = names(x)) ggplot(sigtab, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +   theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Sex) gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) } geoMeans = apply(counts(deseq1obj), 1, gm_mean) deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans) deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric") res = results(deseq1obj, cooksCutoff = FALSE) res alpha = 0.05 sigtab = res[which(res$padj < alpha),] sigtab tax_table(phyloseqObj) sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix")) head(sigtab) sigtab theme_set(theme_bw()) scale_fill_discrete <- function(palname = "Set1", ...) {     scale_fill_brewer(palette = palname, ...) } # Phylum order x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x)) x = sort(x, TRUE) sigtab$Phylum = factor(as.character(sigtab$Phylum), levels = names(x)) # Genus order x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x)) x = sort(x, TRUE) sigtab$Genus = factor(as.character(sigtab$Genus), levels = names(x)) ggplot(sigtab, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +   theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
res = results(deseq1obj, cooksCutoff = FALSE)
res
alpha = 0.05
sigtab = res[which(res$padj < alpha),]
sigtab
plot_heatmap(phyloseqObj_percent, method=NULL, sample.label = "BDE7", sample.order = "BDE7")
featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
plot_heatmap(phyloseqObj_percent, method=NULL, sample.label = "BDE7", sample.order = "BDE7")
columns = read_tsv(text='Weightanalyzed(mg)	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE)
columns = read_table(text='Weightanalyzed(mg)	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE)
columns = read.table(text='Weightanalyzed(mg)	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE)
columns
plot_heatmap(phyloseqObj_percent, method=NULL, sample.label = "BDE7", sample.order = "BDE7")
for (c in columns) {     print (c) }
for (c in columns) {     print (c[1]) }
for (c in columns) {     print (c[1,]) }
for (row in 1:nrow(columns)) {     cell = columns[1, row]     print(cell) }
for (col in 1:ncol(columns)) {     cell = columns[1, col]     print(cell) }
for (col in 1:ncol(columns)) {     cell = columns[1, col]     print(as.string(cell)) }
for (col in 1:ncol(columns)) {     cell = columns[1, col]     print(as.character(cell)) }
plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cell, sample.order = cell) ggsave(paste0(cell, ".png"), last_plot())
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) library(DESeq2)
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Sex)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Sex)
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ SamplingArea)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
res
alpha = 0.05
sigtab = res[which(res$padj < alpha),]
sigtab
tax_table(phyloseqObj)
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))
sigtab
nrow(sigtab)
plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = "SamplingArea", sample.order = "SamplingArea")
plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = "SamplingArea", sample.order = "SamplingArea")
res
sigtab = res[which(res$padj < alpha),]
sigtab
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Weightanalyzed(mg)) gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) } geoMeans = apply(counts(deseq1obj), 1, gm_mean) deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans) deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric") res = results(deseq1obj, cooksCutoff = FALSE) res alpha = 0.05 sigtab = res[which(res$padj < alpha),] sigtab nrow(sigtab)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Weightanalyzed(mg))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ "Weightanalyzed(mg)")
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Weightanalyzedmg)
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ Weightanalyzedmg)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
res
alpha = 0.05
sigtab = res[which(res$padj < alpha),]
sigtab
nrow(sigtab)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ BDE7) gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) } geoMeans = apply(counts(deseq1obj), 1, gm_mean) deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans) deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric") res = results(deseq1obj, cooksCutoff = FALSE) res alpha = 0.05 sigtab = res[which(res$padj < alpha),] sigtab nrow(sigtab)
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ BDE7)
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
geoMeans = apply(counts(deseq1obj), 1, gm_mean)
deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
deseq1obj = DESeq(deseq1obj, test = "Wald", fitType = "parametric")
res = results(deseq1obj, cooksCutoff = FALSE)
res
sigtab = res[which(res$padj < alpha),]
sigtab
theme_set(theme_bw()) scale_fill_discrete <- function(palname = "Set1", ...) {     scale_fill_brewer(palette = palname, ...) } # Phylum order x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x)) x = sort(x, TRUE) sigtab$Phylum = factor(as.character(sigtab$Phylum), levels = names(x)) # Genus order x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x)) x = sort(x, TRUE) sigtab$Genus = factor(as.character(sigtab$Genus), levels = names(x)) ggplot(sigtab, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +   theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
res = results(deseq1obj, cooksCutoff = FALSE) res alpha = 0.05 sigtab = res[which(res$padj < alpha),] sigtab nrow(sigtab) sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix")) head(sigtab) sigtab theme_set(theme_bw()) scale_fill_discrete <- function(palname = "Set1", ...) {     scale_fill_brewer(palette = palname, ...) } # Phylum order x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x)) x = sort(x, TRUE) sigtab$Phylum = factor(as.character(sigtab$Phylum), levels = names(x)) # Genus order x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x)) x = sort(x, TRUE) sigtab$Genus = factor(as.character(sigtab$Genus), levels = names(x)) ggplot(sigtab, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +   theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
theme_set(theme_bw()) sigtabgen = subset(sigtab, !is.na(Genus)) # Phylum order x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x)) x = sort(x, TRUE) sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x)) # Genus order x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x)) x = sort(x, TRUE) sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x)) ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +   geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +   geom_point(size = 6) +   theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ BDE7) gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) } geoMeans = apply(counts(deseq1obj), 1, gm_mean) deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans) deseq1obj = DESeq(deseq1obj, fitType = "local") res = results(deseq1obj, cooksCutoff = FALSE) res alpha = 0.05 sigtab = res[which(res$padj < alpha),] nrow(sigtab) sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix")) theme_set(theme_bw()) sigtabgen = subset(sigtab, !is.na(Genus)) # Phylum order x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x)) x = sort(x, TRUE) sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x)) # Genus order x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x)) x = sort(x, TRUE) sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x)) ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +   geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +   geom_point(size = 6) +   theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ BDE7) gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) } geoMeans = apply(counts(deseq1obj), 1, gm_mean) deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans) deseq1obj = DESeq(deseq1obj, fitType = "local") res = results(deseq1obj, cooksCutoff = FALSE) res alpha = 0.05 sigtab = res[which(res$padj < alpha),] sigtab sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix")) theme_set(theme_bw()) sigtabgen = subset(sigtab, !is.na(Genus)) # Phylum order x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x)) x = sort(x, TRUE) sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x)) # Genus order x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x)) x = sort(x, TRUE) sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x)) ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +   geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +   geom_point(size = 6) +   theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = "BDE7", sample.order = "BDE7")
subset = subset_samples(phyloseqObj_percent, FEATURE.ID = "6d60cdd8895f799a0d432a366fcfa6ef")
subset
subset
subset = subset_samples(phyloseqObj_percent, FEATURE.ID = "6d60cdd8895f799a0d432a366fcfa6ef")
subset
plot_heatmap(subset, method = NULL, sample.label = "BDE7", sample.order = "BDE7")
subset = subset_samples(phyloseqObj_percent, FEATURE.ID == "6d60cdd8895f799a0d432a366fcfa6ef")
taxtable
subset = subset_samples(phyloseqObj_percent, Feature.ID == "6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, Kingdom == "6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, Genus == "6d60cdd8895f799a0d432a366fcfa6ef")
phyloseqObj_percent
phyloseqObj_percent$tax_table
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
phyloseqObj_percent
subset = subset_samples(phyloseqObj_percent, Genus == "6d60cdd8895f799a0d432a366fcfa6ef")
rank_names(phyloseqObj_percent)
otu_table(phyloseqObj_percent)
tax_table(phyloseqObj_percent)
subset = subset_samples(phyloseqObj_percent, Genus=="6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, Genus == "6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj, Genus == "6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj, Genus=="6d60cdd8895f799a0d432a366fcfa6ef")
rank_names(phyloseqObj_percent)
subset = subset_samples(phyloseqObj, "Genus"=="6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, "Genus"=="6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, Genus=="6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, Kingdom=="6d60cdd8895f799a0d432a366fcfa6ef")
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
subset = subset_samples(phyloseqObj_percent, Kingdom=="6d60cdd8895f799a0d432a366fcfa6ef")
subset
subset = subset_samples(phyloseqObj_percent)
subset
subset = subset_samples(phyloseqObj_percent, OTU="ASDAD")
subset
subset = subset_samples(phyloseqObj_percent, OTU="6d60cdd8895f799a0d432a366fcfa6ef")
subset
plot_heatmap(subset, method = NULL, sample.label = "BDE7", sample.order = "BDE7")
subset = subset_samples(phyloseqObj_percent, SampleSource="6d60cdd8895f799a0d432a366fcfa6ef")
subset
subset = subset_samples(phyloseqObj_percent, SampleSource="6d60cdd8895f799a0d432a366fcfa6ef")
subset
subset = subset_samples(phyloseqObj_percent, Genus="6d60cdd8895f799a0d432a366fcfa6ef")
subset
subset = subset_samples(phyloseqObj_percent, Genus="6d60cdd8895f799a0d432a366fcfa6ef")
subset
rank_names(phyloseqObj_percent)
subset = subset_samples(phyloseqObj_percent, Genus="6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, OTU=="6d60cdd8895f799a0d432a366fcfa6ef")
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
subset = subset_samples(phyloseqObj_percent, OTU=="6d60cdd8895f799a0d432a366fcfa6ef")
subset = subset_samples(phyloseqObj_percent, Genus=="6d60cdd8895f799a0d432a366fcfa6ef")
subset = filter_taxa(phyloseqObj_percent, Feature.ID =="ad748df7aae4c5bd1f7207b93da314a5")# subset_samples(phyloseqObj_percent, Genus=="6d60cdd8895f799a0d432a366fcfa6ef")
subset = filter_taxa(phyloseqObj_percent, Genus=="ad748df7aae4c5bd1f7207b93da314a5")# subset_samples(phyloseqObj_percent, Genus=="6d60cdd8895f799a0d432a366fcfa6ef")
plot_heatmap(subset, method = NULL, sample.label = "BDE7", sample.order = "BDE7")
subset = subset_samples(phyloseqObj_percent, taxa_names(phyloseqObj_percent) == "Genus")
subset = subset_samples(phyloseqObj_percent, otu_table(phyloseqObj_percent)$Genus == "Genus")
subset = subset_samples(phyloseqObj_percent, otu_table(phyloseqObj_percent) == "Genus")
subset = subset_samples(phyloseqObj_percent, sampleid == "Genus")
sample_variables(phyloseqObj_percent)
subset = subset_samples(phyloseqObj_percent, SampleSource == "Genus")
subset = subset_samples(phyloseqObj_percent, BDE49 == "11")
subset = prune_taxa("6d60cdd8895f799a0d432a366fcfa6ef", phyloseqObj_percent) #   subset_samples(phyloseqObj_percent, BDE49 == " 11 ")
subset
subset = prune_taxa(c("6d60cdd8895f799a0d432a366fcfa6ef", "56c67ea113134f4a284b9bf667fb5e5a"), phyloseqObj_percent) #   subset_samples(phyloseqObj_percent, BDE49 == " 11 ")
subset
subset = prune_taxa(c("6d60cdd8895f799a0d432a366fcfa6ef", "56c67ea113134f4a284b9bf667fb5e5a", "eb61d5b54a7eb266a249e6fccc559099"), phyloseqObj_percent) #   subset_samples(phyloseqObj_percent, BDE49 == " 11 ")
subset
plot_heatmap(subset, method = NULL, sample.label = "BDE7", sample.order = "BDE7")
sigtab
rownames(sigtab)
subset = prune_taxa(rownames(sigtab), phyloseqObj_percent) #   subset_samples(phyloseqObj_percent, BDE49 == " 11 ")
subset
plot_heatmap(subset, method = NULL, sample.label = "BDE7", sample.order = "BDE7")
plot_heatmap(subset, method = NULL, sample.label = "BDE7", sample.order = "BDE7", taxa.label = "Family")
    cell = "BDE7"
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ cell)
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ $cell)
    ? phyloseqphyloseq_to_deseq2
    ??phyloseqphyloseq_to_deseq2
    formula(cell)
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, formula(cell))
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, formula(~cell))
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~formula(cell))
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ formula(cell))
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ formula("BDE7"))
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~ BDE7)
    objects(cell)
    as.objects(cell)
    assign(design, cell)
        , cell)
    assign(cell, cell)
    cell
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~BDE7)
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, ~cell)
    cell = "~BDE7"
    assign(cell, cell)
    cell
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)
    cell = ~BDE7
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)
    col = 1
    cell = columns[1, col]
columns = read.table(text='SamplingArea Weightanalyzed(mg)	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE)
    col = 1
    cell = columns[1, col]
    cell
    cell = ~BDE7
    cell
    cell = as.character(columns[1, col])
    cell
    cell = ~BDE7
    type(cell)
    class(cell)
    cell = as.formula(columns[1, col])
    cell = paste0("~",as.character(columns[1, col]))
    cell = as.formula(cell)
    cell
    cell = ~BDE7
    cell = paste0("~",as.character(columns[1, col]))
    cell = as.formula(cell)
    cell
    class(cell)
    plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cell, sample.order = cell)
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)
    col = 1     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))     subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)      plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Phylum")     ggsave(paste0(cell, ".phylum.png"), last_plot())     plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Family")     ggsave(paste0(cell, ".family.png"), last_plot())     plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Genus")     ggsave(paste0(cell, ".genus.png"), last_plot())
    col = 1
    cell = paste0("~",as.character(columns[1, col]))
    cell = as.formula(cell)
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)
    gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }
    geoMeans = apply(counts(deseq1obj), 1, gm_mean)
    deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
    deseq1obj = DESeq(deseq1obj, fitType = "local")
    res = results(deseq1obj, cooksCutoff = FALSE)
    alpha = 0.05
    sigtab = res[which(res$padj < alpha),]
    sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))
    nrow(sigtab)
    col = 1     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Phylum")         ggsave(paste0("_", cell, ".phylum.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Family")         ggsave(paste0("_", cell, ".family.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Genus")         ggsave(paste0("_", cell, ".genus.png"), last_plot())     }     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Phylum")     ggsave(paste0(cell, ".phylum.png"), last_plot())     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Family")     ggsave(paste0(cell, ".family.png"), last_plot())     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Genus")     ggsave(paste0(cell, ".genus.png"), last_plot())
    nrow(sigtab)
    if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Phylum")         ggsave(paste0("_", cell, ".phylum.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Family")         ggsave(paste0("_", cell, ".family.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Genus")         ggsave(paste0("_", cell, ".genus.png"), last_plot())     }
    plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cell, sample.order = cell, taxa.label = "Phylum")
    col = 1     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col]))     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("_", cell, ".phylum.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("_", cell, ".family.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("_", cell, ".genus.png"), last_plot())     }     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0(cell, ".phylum.png"), last_plot())     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0(cell, ".family.png"), last_plot())     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     ggsave(paste0(cell, ".genus.png"), last_plot())
    cellName = as.character(columns[1,col]))
    cellName = as.character(columns[1,col])
    plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")
    ggsave(paste0(cell, ".phylum.png"), last_plot())
    ggsave(paste0(cell, ".phylum.png"), last_plot())
    plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")
    ggsave(paste0(cell, ".phylum.png"), last_plot())
    ggsave(paste0(cellName, ".phylum.png"), last_plot())
    ggsave(paste0(cellName, ".phylum.svg"), last_plot())
install.packages("svglite")
ggsave(paste0(cell, ".png"), last_plot())
    ggsave(paste0(cellName, ".phylum.svg"), last_plot())
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) library(DESeq2)
 metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
columns = read.table(text='SamplingArea Weightanalyzed(mg)	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE)
    col = 1     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("_", cellName, ".phylum.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("_", cellName, ".family.png"), last_plot())         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("_", cellName, ".genus.png"), last_plot())     }     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0(cellName, ".phylum.png"), last_plot())     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0(cellName, ".family.png"), last_plot())     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     ggsave(paste0(cellName, ".genus.png"), last_plot())
    ggsave(paste0(cellName, ".phylum.png"), last_plot(), units = "in", width = 50, height = 50, dpi = 320)
    ggsave(paste0(cellName, ".phylum.png"), last_plot(), units = "in", width = 49, height = 49, dpi = 320)
    ggsave(paste0(cellName, ".phylum.png"), last_plot(), units = "in", width = 10, height = 10, dpi = 320)
    ggsave(paste0(cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)
columns = read.table(text='SamplingArea Weightanalyzed(mg)	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0(cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0(cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     ggsave(paste0(cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     ggsave(paste0("all\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) library(DESeq2) metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE)
for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     ggsave(paste0("all\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)
    gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }
    geoMeans = apply(counts(deseq1obj), 1, gm_mean)
    deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)
    deseq1obj = DESeq(deseq1obj, fitType = "local")
    res = results(deseq1obj, cooksCutoff = FALSE)
    alpha = 0.05
    sigtab = res[which(res$padj < alpha),]
    nrow(sigtab)
    plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")
    tax_table(phyloseqObj_percent)
    plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")
    ggsave(paste0("all\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)
columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")         ggsave(paste0("sig\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         #ggsave(paste0("sig\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         #ggsave(paste0("sig\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")     ggsave(paste0("all\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     #ggsave(paste0("all\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     #ggsave(paste0("all\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) library(DESeq2) metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x)) #plot_bar(phyloseqObj_percent, fill = "Order", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Order, width = 0.75), stat = "identity", position = "stack") #plot_tree(phyloseqObj, color="Phylum") #plot_bar(phyloseqObj, fill = "Order") columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE71	BDE77	BDE85	BDE99	BDE100	BDE119	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE171	BDE180	BDE183orDec604	BDE184	BDE191	BDE196	BDE197or204	BDE201	BDE203	BDE205	BDE206	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Cplus	DBDPE	Dec602	Dec603	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBCD_tot	HBB	PBEB	OBIND	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")         ggsave(paste0("sig\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         #ggsave(paste0("sig\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         #ggsave(paste0("sig\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")     ggsave(paste0("all\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     #ggsave(paste0("all\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     #ggsave(paste0("all\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) library(DESeq2) metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x)) #plot_bar(phyloseqObj_percent, fill = "Order", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Order, width = 0.75), stat = "identity", position = "stack") #plot_tree(phyloseqObj, color="Phylum") #plot_bar(phyloseqObj, fill = "Order") columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")         ggsave(paste0("sig\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         #ggsave(paste0("sig\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         #ggsave(paste0("sig\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +           geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +           geom_point(size = 6) +           theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".differential.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")     ggsave(paste0("all\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     #ggsave(paste0("all\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     #ggsave(paste0("all\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x)) #plot_bar(phyloseqObj_percent, fill = "Order", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Order, width = 0.75), stat = "identity", position = "stack") #plot_tree(phyloseqObj, color="Phylum") #plot_bar(phyloseqObj, fill = "Order") columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE15	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1,col])     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")         ggsave(paste0("sig\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         #ggsave(paste0("sig\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         #ggsave(paste0("sig\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")     ggsave(paste0("all\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     #ggsave(paste0("all\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     #ggsave(paste0("all\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x)) #plot_bar(phyloseqObj_percent, fill = "Order", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Order, width = 0.75), stat = "identity", position = "stack") #plot_tree(phyloseqObj, color="Phylum") #plot_bar(phyloseqObj, fill = "Order") columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")         ggsave(paste0("sig\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         #ggsave(paste0("sig\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         #plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         #ggsave(paste0("sig\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Taxon")     ggsave(paste0("all\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     #ggsave(paste0("all\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     #plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     #ggsave(paste0("all\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x)) #plot_bar(phyloseqObj_percent, fill = "Order", x = "SampleSource", facet_grid = ~Sex) + geom_bar(aes(fill = Order, width = 0.75), stat = "identity", position = "stack") #plot_tree(phyloseqObj, color="Phylum") #plot_bar(phyloseqObj, fill = "Order") columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
library("phyloseq") library("ggplot2") library("tidyverse") library(qiime2R) library(microbiomeSeq) library(DESeq2)
 metadata = read_tsv("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\p1p2metadataUTF8.tsv") colnames(metadata) featureTable = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\filteredtobacteria.sample.male.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.taxonomy.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version taxtable tree = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\belugaP1P2.rootedTree.qza", "temp") tree$data shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
corr = taxa.env.correlation(phyloseqObj_percent, "BDE7", method = "pearson", padjust.method = "BH", adjustment = 1)
corr = taxa.env.correlation(phyloseqObj_percent, "BDE7", method = "pearson", padjust.method = "BH")
corr = taxa.env.correlation(phyloseqObj, "BDE7", method = "pearson", padjust.method = "BH")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxonomy$data) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
corr = taxa.env.correlation(phyloseqObj, "BDE7", method = "pearson", padjust.method = "BH")
phyloseqObj_phylum = taxa_level(phyloseqObj, "Phylum")
phyloseqObj_phylum = taxa_level(phyloseqObj, "Phylum")
phyloseqObj_phylum = taxa_level(phyloseqObj, "Phylum")
type(phyloseqObe)
type(phyloseqObj)
phyloseqOb
phyloseqObj
phyloseqObj_phylum = taxa_level(phyloseqObj, "Family")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
phyloseqObj_phylum = taxa_level(phyloseqObj, "Family")
corr = taxa.env.correlation(phyloseqObj, "BDE7", method = "pearson", padjust.method = "BH")
taxa_are_rows(phyloseqObj)
tPhyloseqObj = t(phyloseqObj)
taxa_are_rows(phyloseqObj_phylum)
taxa_are_rows(phyloseqObj)
tPhyloseqObj = t(phyloseqObj)
taxa_are_rows(tPhyloseqObj)
phyloseqObj_phylum = taxa_level(phyloseqObj, "Family")
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family")
tPhyloseqObj
corr = taxa.env.correlation(tPhyloseqObj, "BDE7", method = "pearson", padjust.method = "BH")
taxa_are_rows(phyloseqObj)
tPhyloseqObj = t(phyloseqObj)
taxa_are_rows(tPhyloseqObj)
corr = taxa.env.correlation(tPhyloseqObj, "BDE7", method = "pearson", padjust.method = "BH")
corr = taxa.env.correlation(tPhyloseqObj, "Weightanalyzedmg", method = "pearson", padjust.method = "BH")
sample_data(tPhyloseqObj)
data.frame(sample_data(tPhyloseqObj))
groups <- data.frame(sample_data(tPhyloseqObj))[, grouping_column]
groups <- data.frame(sample_data(tPhyloseqObj))[, "BDE7"]
groups
mt_env <- meta_table[, sapply(groups, is.numeric)]
mt_env <- groups[, sapply(groups, is.numeric)]
meta_table <- data.frame(sample_data(tPhyloseqObj))
groups <- meta_table[, grouping_column]
grouping_column = "BDE7"
meta_table <- data.frame(sample_data(tPhyloseqObj))
groups <- meta_table[, grouping_column]
mt_env <- meta_table[, sapply(meta_table, is.numeric)]
mt_env
abund_table_filt <- abund_table[rownames(mt_env),]
abund_table <- otu_table(tPhyloseqObj)
meta_table <- data.frame(sample_data(tPhyloseqObj))
groups <- meta_table[, grouping_column]
mt_env <- meta_table[, sapply(meta_table, is.numeric)]
abund_table_filt <- abund_table[rownames(mt_env),]
abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]
abund_table_filt
taxa_list <- colnames(abund_table_filt)[1:num.taxa]
abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]
taxa_list <- colnames(abund_table_filt)[1:num.taxa]
taxa_list <- colnames(abund_table_filt)[1:50]
taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]
abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
taxa_list <- colnames(abund_table_filt)[1:num.taxa] #remove "__Unknown__" and add it to others taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
abund_table_filt
abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]
abund_table_filt
abund_table <- otu_table(tPhyloseqObj)
abund_table_filt <- abund_table[rownames(mt_env),]
abund_table_filt
abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]
abund_table_filt
taxa_list <- colnames(abund_table_filt)[1:50]
taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]taxa_list <- colnames(abund_table_filt)[1:50]
taxa_list <- colnames(abund_table_filt)[1:50]
taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]
abund_table_filt
taxa_list
abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
abund_table_filt
tables.correlate <- function(table1, table2, groups = NULL, method) {    df<-NULL   for(i in colnames(table1)){     for(j in colnames(table2)){       if(!is.null(groups)){         for(k in unique(groups)){           a<-table1[groups==k,i,drop=F]           b<-table2[groups==k,j,drop=F]           tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)           if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}          }       }       else{         a<-table1[,i,drop=F]         b<-table2[,j,drop=F]         tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value)         if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}         }       }     }   df<-data.frame(row.names=NULL,df)   return(df) }
df <- tables.correlate(abund_table_filt, mt_env, groups, method)
df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")
df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")
tables.correlate <- function(table1, table2, groups = NULL, method) {    df<-NULL   for(i in colnames(table1)){     for(j in colnames(table2)){       if(!is.null(groups)){         for(k in unique(groups)){             a <- table1[groups == k, i, drop = F]             a             b <- table2[groups == k, j, drop = F]             b           tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)           if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}          }       }       else{         a<-table1[,i,drop=F]         b<-table2[,j,drop=F]         tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value)         if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}         }       }     }   df<-data.frame(row.names=NULL,df)   return(df) }
df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")
a
table1 = abund_table_filt
table2 = mt_env
method="pearson"
df <- NULL
table1
table2
colnames(table1)
colnames(table2)
groups
is.null(groups)
unique(groups)
table1 = abund_table_filt table2 = mt_env method="pearson" df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 a                 b <- table2[groups == k, j, drop = F]                 b                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }         else {             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } }
a
b
for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }         else {             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } }
for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 break                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }         else {             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } }
for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 break                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             } break     }
    break }
for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             } break     }
    break }
for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             } break     }
    break }
groups
groups = NULL
groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             print(i)             print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             print(a)             print(b)             #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             } break     }
    break }
            tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)
            if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }
            df
            }
taxa_are_rows(phyloseqObj)
tPhyloseqObj = t(phyloseqObj)
taxa_are_rows(tPhyloseqObj)
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family")
corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")
abund_table <- otu_table(tPhyloseqObj) meta_table <- data.frame(sample_data(tPhyloseqObj)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL
groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             print(i)             print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             print(a)             print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             df             }     } }
groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             df             }     } }
df
df <- data.frame(row.names = NULL, df)
colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue", "Type")
df
groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             print(tmp)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } }
df
df <- data.frame(row.names = NULL, df)
df
colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")
df$Pvalue <- as.numeric(as.character(df$Pvalue))
df$Correlation <- as.numeric(as.character(df$Correlation))
df$AdjPvalue <- rep(0, dim(df)[1])
df$AdjPvalue <- rep(0, dim(df)[1])
df <- p.adjust.cor(df, adjustment, padjust.method)
# df is a data frame p.adjust.cor <- function(df, adjustment = 1, padjust.method = "BH") {     if (adjustment == 1) {         df$AdjPvalue <- df$Pvalue     } else if (adjustment == 2) {         for (i in unique(df$Env)) {             for (j in unique(df$Type)) {                 sel <- df$Env == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 3) {         for (i in unique(df$Taxa)) {             for (j in unique(df$Type)) {                 sel <- df$Taxa == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 4) {         for (i in unique(df$Taxa)) {             sel <- df$Taxa == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     } else if (adjustment == 5) {         for (i in unique(df$Env)) {             sel <- df$Env == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     }     return(df) }
df <- p.adjust.cor(df, 1, "BH")
df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))
df <- df[complete.cases(df),]
df
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Type, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
plot_taxa_env(df)
p <- ggplot2::ggplot(aes(x = Type, y = Taxa, fill = Correlation), data = df)
p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")
p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)
p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")
p <- p + ggplot2::xlab("Groups")
p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))
return(p)
df
p <- ggplot2::ggplot(aes(x = Type, y = Taxa, fill = Correlation), data = df)
p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")
p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)
p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")
p <- p + ggplot2::xlab("Groups")
p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))
ggplot(p)
ggplot2::ggplot(aes(x = Type, y = Taxa, fill = Correlation), data = df) + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")  + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))  + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)  + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")  + ggplot2::xlab("Groups") + ggplot2::theme(strip.background = element_rect(fill = "white"))
ggplot(aes(x = Type, y = Taxa, fill = Correlation), data = df)
plot_taxa_env(df)
plot_taxa_env(df)
plot_taxa_env(df)
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] df plot_taxa_env(df)
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Phylum") corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] df plot_taxa_env(df)
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] df plot_taxa_env(df) ggsave(paste0("envCorrelation.Phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)
ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 15, height = 10, dpi = 320)
ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 25, height = 10, dpi = 320)
ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320)
ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 45, height = 15, dpi = 320)
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] df plot_taxa_env(df) ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 45, height = 15, dpi = 320)
taxa_are_rows(phyloseqObj)
tPhyloseqObj = t(phyloseqObj)
taxa_are_rows(tPhyloseqObj)
tPhyloseqObj
tax_table(tPhyloseqObj)
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         break         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj)
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         new_abund_table <- NULL         for (i in list) {             break             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
    OTU_taxonomy
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, OTU_taxonomy)         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         new_abund_table <- NULL         for (i in list) {             break             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
        print(colNum)
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, OTU_taxonomy)         print(colNum)         return NULL         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         new_abund_table <- NULL         for (i in list) {             break             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, OTU_taxonomy)         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         new_abund_table <- NULL         for (i in list) {             break             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, OTU_taxonomy)         colnames(OTU_taxonomy)         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         new_abund_table <- NULL         for (i in list) {             break             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
colnames(tax_table(tPhyloseqObj))
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, OTU_taxonomy)         print(colnames(OTU_taxonomy))         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         new_abund_table <- NULL         for (i in list) {             break             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         print(colnames(OTU_taxonomy))         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, which_level]))         print(list)         new_abund_table <- NULL         for (i in list) {             break             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") colnames(tax_table(tPhyloseqObj)) taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = OTU_taxonomy[,1:colNum]         print(colnames(subsetDF))         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, colNum]))         print(list)         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = OTU_taxonomy[,1:colNum]         print(colnames(subsetDF))         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, colNum]))         print(list)         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") colnames(tax_table(tPhyloseqObj))
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = OTU_taxonomy[,colNum-1:colNum]         print(colnames(subsetDF))         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, colNum]))         print(list)         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = OTU_taxonomy[,(colNum-1):colNum]         print(colnames(subsetDF))         print(colNum)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, colNum]))         print(list)         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = OTU_taxonomy[,(colNum-1):colNum]         print(colnames(subsetDF))         print(colNum)         list = paste(df, sep = " ")         print(list)         return (NULL)         list <- na.omit(unique(OTU_taxonomy[, colNum]))         print(list)         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
        print(subsetDF)
    physeq = tPhyloseqObj
    OTU <- otu_table(physeq)
    SAM <- sample_data(physeq)
    OTU_taxonomy <- tax_table(physeq)
    new_abund_table <- NULL
    physeq = tPhyloseqObj     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL
        colNum = grep(which_level, colnames(OTU_taxonomy))
    which_level = "Genus"
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = OTU_taxonomy[,(colNum-1):colNum]
        print(colnames(subsetDF))
        print(colNum)
        print(subsetDF)
        list = paste(df, sep = " ")
        print(list)
        list = paste(subsetDF, sep = " ")
        print(list)
        print(subsetDF)
        list = paste(subsetDF[,(colNum-1)], subsetDF[,colNum], sep = " ")
        list = apply(df, 1, paste, collapse=" ")
        print(list)
        list = apply(subsetDF, 1, paste, collapse=" ")
        print(list)
        view(list)
        View(list)
        colnames(list)
        rownames(list)
        subsetDF$merged = paste(subsetDF[,1], subsetDF[,2])
        print(subsetDF)
        View(subsetDF)
        subsetDF = OTU_taxonomy[,(colNum-1):colNum]
        View(subsetDF)
        subsetDF$merged = paste(subsetDF)
        print(colnames(subsetDF))
        print(colNum)
        View(subsetDF)
        subsetDF = OTU_taxonomy[,(colNum-1):colNum]
        View(subsetDF)
        subsetDF$merged <- paste(subsetDF)
        View(subsetDF)
        colnames(subsetDF)
        subsetDF = OTU_taxonomy[, (colNum - 1):colNum]
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = OTU_taxonomy[, (colNum - 1):colNum]
        View(subsetDF)
        colnames(subsetDF)
        subsetDF$merged <- paste(subsetDF$Family, subsetDF$Genus)
        View(subsetDF)
        subsetDF$merged <- paste(subsetDF$Family, subsetDF$Genus)
        subsetDF = na.omit(OTU_taxonomy[, (colNum - 1):colNum])
        View(subsetDF)
        subsetDF$merged <- paste(subsetDF$Family, subsetDF$Genus)
        subsetDF$merged <- paste(subsetDF$1, subsetDF$2)
        subsetDF$merged <- paste(subsetDF$1, subsetDF$2)
        subsetDF$merged <- paste(subsetDF[1], subsetDF[2])
        View(subsetDF)
        mergedList <- paste(subsetDF[1], subsetDF[2])
        View(mergedList)
        mergedList <- paste(subsetDF[1], subsetDF[2])
        mergedList = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetdf [, 2]))
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = na.omit(OTU_taxonomy[, (colNum - 1):colNum])
        mergedList = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetdf [, 2]))
        class(subsetDF)
        subsetDF = data.frame( na.omit(OTU_taxonomy[, (colNum - 1):colNum]))
        class(subsetDF)
        colnames(subsetDF)
        mergedList = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetdf [, 2]))
        mergedList = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetDF [, 2]))
        View(mergedList)
        mergedList = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetDF [, 2]))[, 3]
        View(mergedList)
        mergedList = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetDF [, 2]))
        View(mergedList)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))
        rownames(subsetdf)
        colnames(subsetDF)
        rownames(subsetDF)
        colnames(subsetDF)
        mergedList = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetDF [, 2]))
        rownames(mergedList)
        colnames(mergedList)
        subsetDF = mutate(subsetDF, x = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        rownames(subsetDF)
        colnames(subsetDF)
        list <- na.omit(unique(OTU_taxonomy[, colNum]))
        View(list)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))
        class(subsetDF)
        rownames(subsetDF)
        colnames(subsetDF)
        subsetDF = mutate(subsetDF, name = rowname(subsetDF))
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        View(subsetDF)
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        View(mergedList)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        View(subsetDF)
        rownames(subsetDF) = subsetDF$names
        View(subsetDF)
        rownames(subsetDF) = subsetDF$name
        View(subsetDF)
        subsetDF$name = NULL
        subsetDF[, 1] = NULL
        subsetDF[, 2] = NULL
        View(subsetDF)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        rownames(subsetDF) = subsetDF$name
        subsetDF[, 1] = NULL
        subsetDF[, 2] = NULL
        subsetDF$name = NULL
        View(mergedList)
        View(subsetDF)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        View(subsetDF)
        rownames(subsetDF) = subsetDF$name
        View(subsetDF)
        subsetDF[, 1] = NULL
        View(subsetDF)
        subsetDF[, 1] = NULL
        View(subsetDF)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        rownames(subsetDF) = subsetDF$name
        subsetDF = subsetDF$merged
        View(subsetDF)
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     physeq = tPhyloseqObj     which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))         rownames(subsetDF) = subsetDF$name         subsetDF = subsetDF$merged         list <- subsetDF         View(list)         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
    physeq = tPhyloseqObj
    which_level = "Genus"
    OTU <- otu_table(physeq)
    SAM <- sample_data(physeq)
    OTU_taxonomy <- tax_table(physeq)
    new_abund_table <- NULL
    if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))         rownames(subsetDF) = subsetDF$name         subsetDF = subsetDF$merged         list <- subsetDF         View(list)         new_abund_table <- NULL         for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }
    OTU <- as.data.frame(as(new_abund_table, "matrix"))
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        rownames(subsetDF) = subsetDF$name
        subsetDF = subsetDF$merged
        list <- subsetDF
        new_abund_table <- NULL
        for (i in list) {             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
            rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])
        for (i in list) {             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
            i=list[1]
            print(i)
            rt = na.omit(rownames(OTU_taxonomy)             rt = na.omit(rownames(OTU_taxonomy))
            rownames(OTU_taxonomy)
        list <- na.omit(unique(OTU_taxonomy[, which_level]))
        new_abund_table <- NULL
        View(list)
            print(i)
            i=list[1]
            print(i)
            rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])
            print(rt)
            rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])
    physeq = tPhyloseqObj
    which_level = "Genus"
    OTU <- otu_table(physeq)
    SAM <- sample_data(physeq)
    OTU_taxonomy <- tax_table(physeq)
    new_abund_table <- NULL
        list <- na.omit(unique(OTU_taxonomy[, which_level]))
        new_abund_table <- NULL
            i=list[1]
            print(i)
            rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])
        for (i in list) {             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        for (i in list) {             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             print(tmp)             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        for (i in list) {             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             print(tmp)             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        #list <- na.omit(unique(OTU_taxonomy[, which_level]))
        View(list)
        View(list2)
        View(list2)         new_abund_table <- NULL         for (i in list) {             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             rownames(tmp) = i             print(tmp)             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        for (i in list) {             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             print(rownames(tmp))             print(tmp)             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        for (i in list) {             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = i             print(colnames(tmp))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        index = 0         for (i in list) {             index = index + 1             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             print(colnames(tmp))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
  physeq = tPhyloseqObj     which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }     }
    OTU <- as.data.frame(as(new_abund_table, "matrix"))
    #Convert the data to phyloseq format
    OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)
    TAX = tax_table(as.matrix(OTU_taxonomy))
    SAM = sample_data(SAM)
    #reconstruct the phyloseq object
    physeq <- NULL
    if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }
    View(OTU)
        for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             print(colnames(tmp))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             print(colnames(tmp))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
    physeq = tPhyloseqObj     which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL
        colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged
      new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             print(colnames(tmp))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- paste("", i, sep = "") }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
            View(new_abund_table)
        for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }             }         View(new_abund_table)
        for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        View(new_abund_table)
        colnames(new_abund_table)
        new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        colnames(new_abund_table)
        new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        colnames(new_abund_table)
        View(new_abund_table)
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        for (i in subsetDF$merged) {             gsub(paste0("D_" + as.character(colNum - 2) + "__"), "", i)             gsub(paste0("D_" + as.character(colNum - 1) + "__"), "", i)         }
        for (i in subsetDF$merged) {             gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", i)             gsub(paste0("D_" , as.character(colNum - 1) , "__"), "", i)         }
        list2 = subsetDF$merged
        View(list2)
        gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        View(list2)
        list2 = subsetDF$merged
        View(list2)
        print(list2)
        subsetDF$merged = gsub("   ", "Unclassified", subsetDF$merged)
        rownames(subsetDF) = subsetDF$name
        print(list2)
        subsetDF$merged = gsub(" ", "Unclassified", subsetDF$merged)
        print(list2)
        subsetDF$merged = gsub("   ", "Unclassified", subsetDF$merged)
        subsetDF$merged = gsub("   ", "Unclassified", subsetDF$merged)
        list2 = subsetDF$merged
        print(list2)
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF$merged = gsub("   ", "Unclassified", subsetDF$merged)
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        print(list2)
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF$merged = gsub("\\<   \\>", "Unclassified", subsetDF$merged)
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        print(list2)
        subsetDF$merged = gsub("\\b   \\b", "Unclassified", subsetDF$merged)
        list2 = subsetDF$merged
        print(list2)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(subsetDF[, 1], " ", subsetDF[, 2]))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        list2 = subsetDF$merged
        print(list2)
        subsetDF$merged = gsub("\\<   \\>", "Unclassified", subsetDF$merged)
        list2 = subsetDF$merged
        print(list2)
        subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"
        list2 = subsetDF$merged
        print(list2)
        subsetDF = data.frame((OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        print(list2)
        subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"
        list2 = subsetDF$merged
        print(list2)
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame((OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
physeq = tPhyloseqObj     which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame((OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }
    physeq = tPhyloseqObj
    which_level = "Genus"
    OTU <- otu_table(physeq)
    SAM <- sample_data(physeq)
    OTU_taxonomy <- tax_table(physeq)
    new_abund_table <- NULL
    if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame((OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #View(new_abund_table)         #colnames(new_abund_table)     }
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame((OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"
        subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        #print(list2)
        #list <- na.omit(unique(OTU_taxonomy[, which_level]))
        #View(list2)
        new_abund_table <- NULL
        index = 0
        for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
    OTU
            print(rt)
        subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"
        subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"
        subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        #print(list2)
        #list <- na.omit(unique(OTU_taxonomy[, which_level]))
        #View(list2)
        new_abund_table <- NULL
        index = 0
        for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     physeq = tPhyloseqObj     which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
    physeq = tPhyloseqObj     which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }
    OTU <- as.data.frame(as(new_abund_table, "matrix"))
    #View(OTU)
    #Convert the data to phyloseq format
    OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)
    TAX = tax_table(as.matrix(OTU_taxonomy))
    SAM = sample_data(SAM)
    physeq <- NULL
        physeq <- merge_phyloseq(phyloseq(OTU), SAM)
    print(OTU)
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subsetDF(subsetDF, subsetDF$merged!="Unclassified")         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged!="Unclassified")         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))           subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged!="Unclassified")         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
        subsetDF = subset(subsetDF, unique(subsetDF$merged))
    physeq = tPhyloseqObj     which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame(na.omit(OTU_taxonomy[, (colNum - 1):colNum]))  
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"
        subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified")
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        new_abund_table <- NULL
        index = 0
        for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"
        subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified")
        subsetDF = subset(subsetDF, unique(subsetDF$merged))
        colNum = grep(which_level, colnames(OTU_taxonomy))
        subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))
        subsetDF = mutate(subsetDF, name = rownames(subsetDF))
        subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))
        subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)
        subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)
        subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"
        subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified")
#        subsetDF = subset(subsetDF, unique(subsetDF$merged))
        #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"
        #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"
        rownames(subsetDF) = subsetDF$name
        list = subsetDF[,2]
        list2 = subsetDF$merged
        #print(list2)
        #list <- na.omit(unique(OTU_taxonomy[, which_level]))
        #View(list2)
        new_abund_table <- NULL
        index = 0
        for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }
        #View(new_abund_table)
        #colnames(new_abund_table)
    }
    OTU <- as.data.frame(as(new_abund_table, "matrix"))
    print(OTU)
    #View(OTU)
    #Convert the data to phyloseq format
    OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)
    TAX = tax_table(as.matrix(OTU_taxonomy))
    SAM = sample_data(SAM)
    #reconstruct the phyloseq object
    physeq <- NULL
    if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }
    return(physeq)
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))         subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified") #        subsetDF = subset(subsetDF, unique(subsetDF$merged))         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             #print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
phyloseqObj_phylum
tPhyloseqObj
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 print(i)                 print(j)                 print(k)                 a <- table1[groups == k, i, drop = F]                 print(a)                 b <- table2[groups == k, j, drop = F]                 print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 print(cora)                 print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] df plot_taxa_env(df) ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 45, height = 15, dpi = 320)
ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 75, height = 15, dpi = 320)
ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 50, height = 15, dpi = 320)
ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 49, height = 15, dpi = 320)
ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 88, height = 15, dpi = 320, limitsize = FALSE)
ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 50, height = 15, dpi = 320, limitsize = FALSE)
ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df plot_taxa_env(df) ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df plot_taxa_env(df) ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE) #end env correlation
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Phylum") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df plot_taxa_env(df) ggsave(paste0("envCorrelation.Phylum.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE) #end env correlation
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Species") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df plot_taxa_env(df) ggsave(paste0("envCorrelation.Species.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
library.install(phyloseq)
install.packages(phyloseq)
install.packages("phyloseq")
install.packages(phylose)
install.packages(phyloseq)
install.packages("phyloseq")
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
library("phyloseq") #1.24.2
install.packages("ggplot2")
install.packages("tidyverse> install.packages("tidyverse")")
install.packages("tidyverse> install.packages("tidyverse")")> install.packages("tidyverse> install.packages("tidyverse")")
install.packages("tidyverse")
install.packages(qiime2R)
library("ggplot2") #3.0.0
library("tidyverse") #1.2.1
devtools::install_github("jbisanz/qiime2R")> devtools::install_github("jbisanz/qiime2R")
library(qiime2R)
library("microbiomeSeq") #1.2.1
install.packages("microbiomeSeq")
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
library(qiime2R) #0.99.1
library("tidyverse") #1.2.1
library(qiime2R) #0.99.1
library(microbiomeSeq) #0.1
library(DESeq2) #1.20.0
library("phyloseq") #1.24.2
library("ggplot2") #3.0.0
library("tidyverse") #1.2.1
library(qiime2R) #0.99.1
library(microbiomeSeq) #0.1
library(DESeq2) #1.20.0
featureTable = read_qza("D:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp")
packageVersion(DESeq2)
packageVersion(qiime2R)
featureTable = read_qza("D:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp")
colnames(featureTable$data)
featureTable = read_qza("D:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp")
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.tsv")
colnames(metadata)
featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp")
colnames(featureTable$data)
taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.taxonomy.vsearch.qza", "temp")
colnames(taxonomy$data)
taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
View(taxtable)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.rootedTree.qza", "temp")
View(tree$data)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
 metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.tsv") colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.taxonomy.vsearch.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.rootedTree.qza", "temp") View(tree$data) #shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
columns = read.table(text='SamplingArea Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) columns
dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE)
for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
print(ncol(columns))
columns = read.table(text='Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE)
print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
columns = read.table(text='SampleorControl Sex  Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE)
for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
columns = read.table(text='Sex  Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE)
dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE) print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.clean.tsv")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
columns = read.table(text='Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) columns dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE) print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
View(metadata)
columns = read.table(text='Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) columns dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE) print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
    cell = paste0("~",as.character(columns[1, col]))
    cell = as.formula(cell)
    cellName = as.character(columns[1, col])
    print(cellName)
    deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)
    View(cell)
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.clean.tsv")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
columns = read.table(text='Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) columns dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE) print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     View(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
View(metadata)
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.clean.tsv")
colnames(metadata)
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
columns = read.table(text='Weightanalyzedmg	Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) columns dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE) print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     View(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
columns = read.table(text='Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE)
dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE) print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     View(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Species")
grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum))
mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df
colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df
df <- p.adjust.cor(df, 1, "BH")
plot_taxa_env(df)
package.version("phyloseq")
package.version("qiime2R")
package.version("microbiomeSeq")
package.version("DESeq2")
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))         subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified") #        subsetDF = subset(subsetDF, unique(subsetDF$merged))         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             #print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
ggsave(paste0("envCorrelation.Species.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
subset = prune_taxa(rownames(sigtab), phyloseqObj_percent) #   subset_samples(phyloseqObj_percent, BDE49 == " 11 ")
plot_heatmap(subset, method = NULL, sample.label = "BDE7", sample.order = "BDE7", taxa.label = "Family")
gm_mean = function(x, na.rm = TRUE) {     exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x)) }
tables.correlate <- function(table1, table2, groups = NULL, method) {    df<-NULL   for(i in colnames(table1)){     for(j in colnames(table2)){       if(!is.null(groups)){         for(k in unique(groups)){             a <- table1[groups == k, i, drop = F]             b <- table2[groups == k, j, drop = F]           tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)           if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}          }       }       else{         a<-table1[,i,drop=F]         b<-table2[,j,drop=F]         tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value)         if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}         }       }     }   df<-data.frame(row.names=NULL,df)   return(df) } # df is a data frame p.adjust.cor <- function(df, adjustment = 1, padjust.method = "BH") {     if (adjustment == 1) {         df$AdjPvalue <- df$Pvalue     } else if (adjustment == 2) {         for (i in unique(df$Env)) {             for (j in unique(df$Type)) {                 sel <- df$Env == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 3) {         for (i in unique(df$Taxa)) {             for (j in unique(df$Type)) {                 sel <- df$Taxa == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 4) {         for (i in unique(df$Taxa)) {             sel <- df$Taxa == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     } else if (adjustment == 5) {         for (i in unique(df$Env)) {             sel <- df$Env == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     }     return(df) }
columns = read.table(text='Lipides	BDE7	BDE10	BDE17	BDE28orPBT	BDE47	BDE49	BDE66	BDE77	BDE85	BDE99	BDE100	BDE126	BDE138	BDE139	BDE140	BDE153	BDE154orBB153	BDE183orDec604	BDE184	BDE196	BDE197or204	BDE201	BDE203	BDE207	BDE208	BDE209	Penta	Octa	Deca	percent_Penta	percent_Octa	percent_Deca	percent_Other	PBDE_tot	Dec604CB	BEHTBPorsynDP	antiDP	DP_tot	fanti	HBB	PBEB	HFRs	Dechloranes', header=FALSE) columns dir.create("sig", showWarnings = FALSE) dir.create("sig\\phylum", showWarnings = FALSE) dir.create("sig\\family", showWarnings = FALSE) dir.create("sig\\genus", showWarnings = FALSE) dir.create("all", showWarnings = FALSE) dir.create("all\\phylum", showWarnings = FALSE) dir.create("all\\family", showWarnings = FALSE) dir.create("all\\genus", showWarnings = FALSE) print(ncol(columns)) for (col in 1:ncol(columns)) {     cell = paste0("~",as.character(columns[1, col]))     cell = as.formula(cell)     View(cell)     cellName = as.character(columns[1, col])     print(cellName)     deseq1obj = phyloseq_to_deseq2(phyloseqObj, cell)     gm_mean = function(x, na.rm = TRUE) {         exp(sum(log(x[x > 0]), na.rm = na.rm) / length(x))     }     geoMeans = apply(counts(deseq1obj), 1, gm_mean)     deseq1obj = estimateSizeFactors(deseq1obj, geoMeans = geoMeans)     deseq1obj = DESeq(deseq1obj, fitType = "local")     res = results(deseq1obj, cooksCutoff = FALSE)     alpha = 0.05     sigtab = res[which(res$padj < alpha),]     nrow(sigtab)     if (nrow(sigtab) > 0) {         sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyloseqObj)[rownames(sigtab),], "matrix"))         subset = prune_taxa(rownames(sigtab), phyloseqObj_percent)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")         ggsave(paste0("sig\\phylum\\_", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")         ggsave(paste0("sig\\family\\_", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         plot_heatmap(subset, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus")         ggsave(paste0("sig\\genus\\_", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)         theme_set(theme_bw())         sigtabgen = subset(sigtab, !is.na(Genus))         # Phylum order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels = names(x))         # Genus order         x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))         x = sort(x, TRUE)         sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels = names(x))         ggplot(sigtabgen, aes(y = Genus, x = log2FoldChange, color = Phylum)) +         geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +         geom_point(size = 6) +         theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))         ggsave(paste0("sig\\_", cellName, ".diff.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     }     tax_table(phyloseqObj_percent)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Phylum")     ggsave(paste0("all\\phylum\\", cellName, ".phylum.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Family")     ggsave(paste0("all\\family\\", cellName, ".family.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320)     plot_heatmap(phyloseqObj_percent, method = NULL, sample.label = cellName, sample.order = cellName, taxa.label = "Genus", taxa.order = "")     ggsave(paste0("all\\genus\\", cellName, ".genus.png"), last_plot(), units = "in", width = 15, height = 15, dpi = 320) }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Phylum") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df plot_taxa_env(df) ggsave(paste0("envCorrelation.Phylum.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df plot_taxa_env(df) ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE) #end env correlation
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df plot_taxa_env(df) ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE) #end env correlation
View(df)
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Species") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df)
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df)
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Species") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df)
plot_taxa_env(df)
ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     #p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     #p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     #p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     #p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     #p <- p + ggplot2::xlab("Groups")     #p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
plot_taxa_env(df)
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     #p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     #p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     #p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     #p <- p + ggplot2::xlab("Groups")     #p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     #p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     #p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     #p <- p + ggplot2::xlab("Groups")     #p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Species") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df) plot_taxa_env(df)
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     #p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     #p <- p + ggplot2::xlab("Groups")     #p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
plot_taxa_env(df)
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Species") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df) plot_taxa_env(df) ggsave(paste0("envCorrelation.Species.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df) plot_taxa_env(df) ggsave(paste0("envCorrelation.Genus.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df) plot_taxa_env(df) ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))         subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified") #        subsetDF = subset(subsetDF, unique(subsetDF$merged))         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             #print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
tables.correlate <- function(table1, table2, groups = NULL, method) {    df<-NULL   for(i in colnames(table1)){     for(j in colnames(table2)){       if(!is.null(groups)){         for(k in unique(groups)){             a <- table1[groups == k, i, drop = F]             b <- table2[groups == k, j, drop = F]           tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)           if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}          }       }       else{         a<-table1[,i,drop=F]         b<-table2[,j,drop=F]         tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value)         if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}         }       }     }   df<-data.frame(row.names=NULL,df)   return(df) }
p.adjust.cor <- function(df, adjustment = 1, padjust.method = "BH") {     if (adjustment == 1) {         df$AdjPvalue <- df$Pvalue     } else if (adjustment == 2) {         for (i in unique(df$Env)) {             for (j in unique(df$Type)) {                 sel <- df$Env == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 3) {         for (i in unique(df$Taxa)) {             for (j in unique(df$Type)) {                 sel <- df$Taxa == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 4) {         for (i in unique(df$Taxa)) {             sel <- df$Taxa == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     } else if (adjustment == 5) {         for (i in unique(df$Env)) {             sel <- df$Env == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     }     return(df) }
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.clean.tsv") colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.taxonomy.vsearch.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.rootedTree.qza", "temp") View(metadata) #shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
library("phyloseq") #1.24.2 library("ggplot2") #3.0.0 library("tidyverse") #1.2.1 library(qiime2R) #0.99.1 library(microbiomeSeq) #0.1 library(DESeq2) #1.20.0
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.clean.tsv") colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.taxonomy.vsearch.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.rootedTree.qza", "temp") View(metadata)
#pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) }
taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))         subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified") #        subsetDF = subset(subsetDF, unique(subsetDF$merged))         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             #print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) }
tables.correlate <- function(table1, table2, groups = NULL, method) {    df<-NULL   for(i in colnames(table1)){     for(j in colnames(table2)){       if(!is.null(groups)){         for(k in unique(groups)){             a <- table1[groups == k, i, drop = F]             b <- table2[groups == k, j, drop = F]           tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)           if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}          }       }       else{         a<-table1[,i,drop=F]         b<-table2[,j,drop=F]         tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value)         if(is.null(df)){df<-tmp} else{df<-rbind(df,tmp)}         }       }     }   df<-data.frame(row.names=NULL,df)   return(df) }
p.adjust.cor <- function(df, adjustment = 1, padjust.method = "BH") {     if (adjustment == 1) {         df$AdjPvalue <- df$Pvalue     } else if (adjustment == 2) {         for (i in unique(df$Env)) {             for (j in unique(df$Type)) {                 sel <- df$Env == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 3) {         for (i in unique(df$Taxa)) {             for (j in unique(df$Type)) {                 sel <- df$Taxa == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 4) {         for (i in unique(df$Taxa)) {             sel <- df$Taxa == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     } else if (adjustment == 5) {         for (i in unique(df$Env)) {             sel <- df$Env == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     }     return(df) }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt)[1:50] taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env View(table1) method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df)
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Species")
abund_table <- otu_table(phyloseqObj_phylum)
meta_table <- data.frame(sample_data(phyloseqObj_phylum))
mt_env <- meta_table[, sapply(meta_table, is.numeric)]
abund_table_filt <- abund_table[rownames(mt_env),]
abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]
taxa_list <- colnames(abund_table_filt)[1:50]
taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]
abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
table1 = abund_table_filt
table2 = mt_env
View(table1)
ncol(table1)
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
abund_table <- otu_table(phyloseqObj_phylum)
meta_table <- data.frame(sample_data(phyloseqObj_phylum))
#groups <- meta_table[, grouping_column]
#groups
mt_env <- meta_table[, sapply(meta_table, is.numeric)]
abund_table_filt <- abund_table[rownames(mt_env),]
abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]
taxa_list <- colnames(abund_table_filt)[1:50]
taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]
abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
#df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")
table1 = abund_table_filt
table2 = mt_env
View(table1)
ncol(table1)
View(mt_env)
mt_env <- meta_table[, sapply(meta_table, is.numeric)]
View(mt_env)
abund_table_filt <- abund_table[rownames(mt_env),]
View(abund_table_filt)
abund_table <- otu_table(phyloseqObj_phylum)
View(abund_table)
mt_env <- meta_table[, sapply(meta_table, is.numeric)]
View(mt_env)
abund_table_filt <- abund_table[rownames(mt_env),]
View(abund_table_filt)
View(abund_table)
abund_table_filt <- abund_table[rownames(mt_env),]
View(abund_table_filt)
taxa_list <- colnames(abund_table_filt)
View(taxa_list)
abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
View(table1)
ncol(table1)
#corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) View(abund_table) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] View(mt_env) abund_table_filt <- abund_table[rownames(mt_env),] View(abund_table_filt) abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] View(abund_table_filt) taxa_list <- colnames(abund_table_filt) View(taxa_list) taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env View(table1) ncol(table1)
View(abund_table)
ncol(abund_table)
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus")
abund_table <- otu_table(phyloseqObj_phylum)
View(abund_table)
ncol(abund_table)
phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) View(abund_table) ncol(abund_table)
meta_table <- data.frame(sample_data(phyloseqObj_phylum))
mt_env <- meta_table[, sapply(meta_table, is.numeric)]
abund_table_filt <- abund_table[rownames(mt_env),]
ncol(abund_table_filt)
ncol(abund_table_filt)
taxa_list <- colnames(abund_table_filt)
taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]
abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])
table1 = abund_table_filt
table2 = mt_env
#####env correlation taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Family") #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH") #grouping_column = "BDE7" abund_table <- otu_table(phyloseqObj_phylum) meta_table <- data.frame(sample_data(phyloseqObj_phylum)) #groups <- meta_table[, grouping_column] #groups mt_env <- meta_table[, sapply(meta_table, is.numeric)] abund_table_filt <- abund_table[rownames(mt_env),] abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)] taxa_list <- colnames(abund_table_filt) taxa_list <- taxa_list[!grepl("Unknown", taxa_list)] abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list]) #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson") table1 = abund_table_filt table2 = mt_env method = "pearson" groups = NULL df <- NULL for (i in colnames(table1)) {     for (j in colnames(table2)) {         if (!is.null(groups)) {             for (k in unique(groups)) {                 a <- table1[groups == k, i, drop = F]                 #print(a)                 b <- table2[groups == k, j, drop = F]                 #print(b)                 cora = a[complete.cases(b),]                 corb = b[complete.cases(b),]                 #print(cora)                 #print(corb)                 #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                 #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }         }         else {             #print(i)             #print(j)             a <- table1[, i, drop = F]             b <- table2[, j, drop = F]             #print(a)             #print(b)             tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)             if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }             }     } } df <- data.frame(row.names = NULL, df) #df colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue") df$Pvalue <- as.numeric(as.character(df$Pvalue)) df$Correlation <- as.numeric(as.character(df$Correlation)) df$AdjPvalue <- rep(0, dim(df)[1]) df <- p.adjust.cor(df, 1, "BH") df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", "")) df <- df[complete.cases(df),] #df View(df) plot_taxa_env(df)
ggsave(paste0("envCorrelation.Family.png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     #df     View(df)     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)     #end env correlation }
make_env_cor_graph(tPhyloseqObj, level)
level = "Phylum"
make_env_cor_graph(tPhyloseqObj, level)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     #df     View(df)     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)     #end env correlation }
make_env_cor_graph(tPhyloseqObj, level)
level = "Class"
make_env_cor_graph(tPhyloseqObj, level)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 15, dpi = 320, limitsize = FALSE)     #end env correlation }
level = "Order"
make_env_cor_graph(tPhyloseqObj, level)
level = "Family"
make_env_cor_graph(tPhyloseqObj, level)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = nrow(df), dpi = 320, limitsize = FALSE)     #end env correlation }
level = "Phylum"
make_env_cor_graph(tPhyloseqObj, level)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 0.5 * nrow(df), dpi = 320, limitsize = FALSE)     #end env correlation }
level = "Phylum"
make_env_cor_graph(tPhyloseqObj, level)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     nrow(df)     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 0.5 * nrow(df), dpi = 320, limitsize = FALSE)     #end env correlation }
level = "Phylum"
make_env_cor_graph(tPhyloseqObj, level)
    nrow(df)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 0.5 * ncol(table1), dpi = 320, limitsize = FALSE)     #end env correlation }
level = "Phylum"
make_env_cor_graph(tPhyloseqObj, level)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     #end env correlation }
level = "Phylum"
make_env_cor_graph(tPhyloseqObj, level)
level = "Class"
make_env_cor_graph(tPhyloseqObj, level)
level = "Order"
make_env_cor_graph(tPhyloseqObj, level)
level = "Family"
make_env_cor_graph(tPhyloseqObj, level)
level = "Genus"
make_env_cor_graph(tPhyloseqObj, level)
level = "Species"
make_env_cor_graph(tPhyloseqObj, level)
level = c("Phylum", "Class", "Order", "Family", "Genus", "Species")
for (i in 1:length(level)) {     print(i) }
level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     print(level[i]) }
    View(df)
    View(df)
    View(df)
    df.clean <- df.loc[df['Significance'] <= 0.05]
    df.clean <- df[df['Significance'] <= 0.05]
    df.clean <- df[df['AdjPvalue'] <= 0.05]
    View(df.clean)
    df.clean <- as.dataframe(df[df['AdjPvalue'] <= 0.05])
    df.clean <- as.data.frame(df[df['AdjPvalue'] <= 0.05])
    View(df.clean)
    df.clean = df
    df.clean %>% filter(Significance <= 0.05)
    df.clean %>% filter(AdjPvalue <= 0.05)
    View(df.clean)
    df.clean = df %>% filter(Taxa %in% df$Taxa)
    View(df.clean)
    df.clean = df %>% filter(Taxa %in% df$Taxa)
    View(df)
    View(df.clean)
    df %>% filter(Taxa %in% df$Taxa)
    df.clean %>% filter(AdjPvalue <= 0.05)
    df %>% filter(AdjPvalue <= 0.05)
    df.clean = df %>% filter(AdjPvalue <= 0.05)
    View(df.clean)
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
library("phyloseq") #1.24.2 library("ggplot2") #3.0.0 library("tidyverse") #1.2.1 library(qiime2R) #0.99.1 library(microbiomeSeq) #0.1 library(DESeq2) #1.20.0 #R3.5.1
 metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\csv\\metadata.clean.tsv") colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.featuretable.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.taxonomy.vsearch.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_newprimers\\beluga_newprimer\\beluga_newprimer.rootedTree.qza", "temp") View(metadata) #shannon = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function (x) 100 * x/sum(x))
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     df.clean = df %>% filter(AdjPvalue <= 0.05)     View(df.clean)     df.clean = df %>% filter(Taxa %in% df$Taxa)     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     #end env correlation } plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) } #phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") #colnames(tax_table(tPhyloseqObj)) taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))         subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified") #        subsetDF = subset(subsetDF, unique(subsetDF$merged))         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             #print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) } tables.correlate <- function(table1, table2, groups = NULL, method) {     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     b <- table2[groups == k, j, drop = F]                     tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                     }             }             else {                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     return(df) } # df is a data frame p.adjust.cor <- function(df, adjustment = 1, padjust.method = "BH") {     if (adjustment == 1) {         df$AdjPvalue <- df$Pvalue     } else if (adjustment == 2) {         for (i in unique(df$Env)) {             for (j in unique(df$Type)) {                 sel <- df$Env == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 3) {         for (i in unique(df$Taxa)) {             for (j in unique(df$Type)) {                 sel <- df$Taxa == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 4) {         for (i in unique(df$Taxa)) {             sel <- df$Taxa == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     } else if (adjustment == 5) {         for (i in unique(df$Env)) {             sel <- df$Env == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     }     return(df) }
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     df.clean = df %>% filter(AdjPvalue <= 0.05)     View(df.clean)     df.clean = df %>% filter(Taxa %in% df$Taxa)     #df     write.table(df, file = paste0("envCorrelation.", level, ".tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.",level,".png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     #end env correlation } plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 3) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) } #phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") #colnames(tax_table(tPhyloseqObj)) taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))         subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_" , as.character(colNum - 2) , "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified") #        subsetDF = subset(subsetDF, unique(subsetDF$merged))         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[,2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             #print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }         }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) } tables.correlate <- function(table1, table2, groups = NULL, method) {     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     b <- table2[groups == k, j, drop = F]                     tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                     }             }             else {                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     return(df) } # df is a data frame p.adjust.cor <- function(df, adjustment = 1, padjust.method = "BH") {     if (adjustment == 1) {         df$AdjPvalue <- df$Pvalue     } else if (adjustment == 2) {         for (i in unique(df$Env)) {             for (j in unique(df$Type)) {                 sel <- df$Env == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 3) {         for (i in unique(df$Taxa)) {             for (j in unique(df$Type)) {                 sel <- df$Taxa == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 4) {         for (i in unique(df$Taxa)) {             sel <- df$Taxa == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     } else if (adjustment == 5) {         for (i in unique(df$Env)) {             sel <- df$Env == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     }     return(df) }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) level = c("Phylum", "Class", "Order", "Family", "Genus", "Species")
    make_env_cor_graph(tPhyloseqObj, level[i])
    View(df.clean)
    df.clean = df %>% filter(Taxa %in% df.clean$Taxa)
    View(df.clean)
    df.clean = df %>% filter(AdjPvalue <= 0.05)
    View(df.clean)
    df %>% filter(Taxa %in% df.clean$Taxa)
    df.sig = df %>% filter(Taxa %in% df.clean$Taxa)
nrow(df)
nrow(df.clean)
nrow(df.sig)
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     df.clean = df %>% filter(AdjPvalue <= 0.05)     df.sig = df %>% filter(Taxa %in% df.clean$Taxa)     #df     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     write.table(df, file = paste0("envCorrelation.", level, ".Significant.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     plot_taxa_env(df.sig)     ggsave(paste0("envCorrelation.", level, ".Significant.png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     #end env correlation }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
make_env_cor_graph <- function(obj, level) {     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     } }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
 make_env_cor_graph <- function(obj, level) {     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     } }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
        ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE)
make_env_cor_graph <- function(obj, level) {     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE)     } }
level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
nrow(df.sig)
make_env_cor_graph <- function(obj, level) {     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.15 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE)     } }
level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
        View(df.sig)
        nrow(df.sig)
        ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE)
    sig = c(0.001, 0.01, 0.05)
        ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE)
        plot_taxa_env(df.sig)
        i=1
        df.clean = df %>% filter(AdjPvalue <= sig[i])
        df.sig = df %>% filter(Taxa %in% df.clean$Taxa)
        View(df.sig)
        nrow(df.sig)
        plot_taxa_env(df.sig)
        ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE)
        ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE, device = "png")
        print(sig[i])
        ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]),".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(df.sig), dpi = 320, limitsize = FALSE, device = "png")
        nrow(unique(df.sig["Taxa"]))
        ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]), ".png"), last_plot(), units = "in", width = 35, height = 0.15 * nrow(unique(df.sig["Taxa"])), dpi = 320, limitsize = FALSE, device = "png")
make_env_cor_graph <- function(obj, level) {     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.20 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         i = 1         print(sig[i])         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         View(df.sig)         nrow(unique(df.sig["Taxa"]))         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]), ".png"), last_plot(), units = "in", width = 35, height = 0.20 * nrow(unique(df.sig["Taxa"])), dpi = 320, limitsize = FALSE, device = "png")     } }
 make_env_cor_graph <- function(obj, level) {     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.20 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         i = 1         print(sig[i])         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         View(df.sig)         nrow(unique(df.sig["Taxa"]))         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]), ".png"), last_plot(), units = "in", width = 35, height = 0.20 * nrow(unique(df.sig["Taxa"])), dpi = 320, limitsize = FALSE, device = "png")     } }
level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
make_env_cor_graph <- function(obj, level) {     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.20 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         i = 1         print(sig[i])         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]), ".png"), last_plot(), units = "in", width = 35, height = 0.20 * nrow(unique(df.sig["Taxa"])), dpi = 320, limitsize = FALSE, device = "png")     } }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
make_env_cor_graph <- function(obj, level) {     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 35, height = 0.20 * ncol(table1), dpi = 320, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         write.table(df, file = paste0("envCorrelation.", level, ".SignificantAt",as.character(sig[i]),".tsv"), quote = FALSE, sep = '\t')         plot_taxa_env(df.sig)         ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]), ".png"), last_plot(), units = "in", width = 35, height = 0.20 * nrow(unique(df.sig["Taxa"])), dpi = 320, limitsize = FALSE, device = "png")     } }
taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) level = c("Phylum", "Class", "Order", "Family", "Genus", "Species") for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
rtvs::debug_source("D:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
rtvs::debug_source("D:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
level = c("Species")
for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
rtvs::debug_source("D:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
rtvs::debug_source("D:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
rtvs::debug_source("H:/OneDrive/ProjectMicrobiome/phyloseq/phyloseq/script.R")
plot_taxa_env <- function(df) {     p <- ggplot2::ggplot(aes(x = Env, y = Taxa, fill = Correlation), data = df)     p <- p + ggplot2::geom_tile() + scale_fill_gradient2(low = "#2C7BB6", mid = "white", high = "#D7191C")     p <- p + ggplot2::theme(axis.text.x = element_text(size = 20, angle = 90, hjust = 1, vjust = 0.5))     p <- p + ggplot2::theme(axis.text.y = element_text(size = 20, angle = 0, hjust = 1, vjust = 0.5))     p <- p + ggplot2::geom_text(aes(label = Significance), color = "black", size = 8) + labs(y = NULL, x = NULL)     p <- p + ggplot2::facet_grid(. ~ Env, drop = TRUE, scale = "free", space = "free_x")     p <- p + ggplot2::xlab("Groups")     p <- p + ggplot2::theme(strip.background = element_rect(fill = "white"))     return(p) } #phyloseqObj_phylum = taxa_level(tPhyloseqObj, "Genus") #colnames(tax_table(tPhyloseqObj)) taxa_level <- function(physeq, which_level) {     if (taxa_are_rows(physeq)) {         physeq <- t(physeq)     }     #physeq = tPhyloseqObj     #which_level = "Genus"     OTU <- otu_table(physeq)     SAM <- sample_data(physeq)     OTU_taxonomy <- tax_table(physeq)     new_abund_table <- NULL     if (which_level == "Otus") {         OTU_tree <- phy_tree(physeq)         new_abund_table <- OTU     } else {         colNum = grep(which_level, colnames(OTU_taxonomy))         subsetDF = data.frame(na.omit(unique(OTU_taxonomy[, (colNum - 1):colNum])))         subsetDF = mutate(subsetDF, name = rownames(subsetDF))         subsetDF = mutate(subsetDF, merged = paste(trimws(subsetDF[, 1]), " ", trimws(subsetDF[, 2])))         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 2), "__"), "", subsetDF$merged)         subsetDF$merged = gsub(paste0("D_", as.character(colNum - 1), "__"), "", subsetDF$merged)         subsetDF$merged[subsetDF$merged == "   "] = "Unclassified"         subsetDF = subset(subsetDF, subsetDF$merged != "Unclassified")         #        subsetDF = subset(subsetDF, unique(subsetDF$merged))         #subsetDF$merged[subsetDF$merged == "NA   NA"] = "Unclassified"         #subsetDF[, 2][subsetDF[, 2] == "NA"] = "Unclassified"         rownames(subsetDF) = subsetDF$name         list = subsetDF[, 2]         list2 = subsetDF$merged         #print(list2)         #list <- na.omit(unique(OTU_taxonomy[, which_level]))         #View(list2)         new_abund_table <- NULL         index = 0         for (i in list) {             index = index + 1             #print(i)             rt <- na.omit(rownames(OTU_taxonomy)[OTU_taxonomy[, which_level] == i])             #print(rt)             tmp <- data.frame(rowSums(OTU[, rt]))             #print(tmp)             colnames(tmp) = list2[index]             #if (i == "") { colnames(tmp) <- c("__Unknowns__") } else { colnames(tmp) <- list2[index] }             if (is.null(new_abund_table)) { new_abund_table <- tmp } else { new_abund_table <- cbind(tmp, new_abund_table) }             }         #View(new_abund_table)         #colnames(new_abund_table)     }     OTU <- as.data.frame(as(new_abund_table, "matrix"))     #print(OTU)     #View(OTU)     #Convert the data to phyloseq format     OTU = otu_table(as.matrix(OTU), taxa_are_rows = FALSE)     TAX = tax_table(as.matrix(OTU_taxonomy))     SAM = sample_data(SAM)     #reconstruct the phyloseq object     physeq <- NULL     if (which_level == "Otus") {         physeq <- merge_phyloseq(phyloseq(OTU, TAX), SAM, midpoint(OTU_tree))     } else {         physeq <- merge_phyloseq(phyloseq(OTU), SAM)     }     return(physeq) } tables.correlate <- function(table1, table2, groups = NULL, method) {     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     b <- table2[groups == k, j, drop = F]                     tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                     }             }             else {                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }     }     df <- data.frame(row.names = NULL, df)     return(df) } # df is a data frame p.adjust.cor <- function(df, adjustment = 1, padjust.method = "BH") {     if (adjustment == 1) {         df$AdjPvalue <- df$Pvalue     } else if (adjustment == 2) {         for (i in unique(df$Env)) {             for (j in unique(df$Type)) {                 sel <- df$Env == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 3) {         for (i in unique(df$Taxa)) {             for (j in unique(df$Type)) {                 sel <- df$Taxa == i & df$Type == j                 df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)             }         }     } else if (adjustment == 4) {         for (i in unique(df$Taxa)) {             sel <- df$Taxa == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     } else if (adjustment == 5) {         for (i in unique(df$Env)) {             sel <- df$Env == i             df$AdjPvalue[sel] <- p.adjust(df$Pvalue[sel], method = padjust.method)         }     }     return(df) } make_env_cor_graph <- function(obj, level) {     #level = "Family"     #obj = tPhyloseqObj     print(level)     phyloseqObj_phylum = taxa_level(obj, level)     #corr = taxa.env.correlation(tPhyloseqObj, NULL, method = "pearson", padjust.method = "BH")     #grouping_column = "BDE7"     abund_table <- otu_table(phyloseqObj_phylum)     meta_table <- data.frame(sample_data(phyloseqObj_phylum))     #groups <- meta_table[, grouping_column]     #groups     mt_env <- meta_table[, sapply(meta_table, is.numeric)]     abund_table_filt <- abund_table[rownames(mt_env),]     abund_table_filt <- abund_table_filt[, order(colSums(abund_table_filt), decreasing = TRUE)]     taxa_list <- colnames(abund_table_filt)     taxa_list <- taxa_list[!grepl("Unknown", taxa_list)]     abund_table_filt <- data.frame(abund_table_filt[, colnames(abund_table_filt) %in% taxa_list])     #df <- tables.correlate(abund_table_filt, mt_env, groups, "pearson")     table1 = abund_table_filt     table2 = mt_env     method = "pearson"     groups = NULL     df <- NULL     for (i in colnames(table1)) {         for (j in colnames(table2)) {             if (!is.null(groups)) {                 for (k in unique(groups)) {                     a <- table1[groups == k, i, drop = F]                     #print(a)                     b <- table2[groups == k, j, drop = F]                     #print(b)                     cora = a[complete.cases(b),]                     corb = b[complete.cases(b),]                     #print(cora)                     #print(corb)                     #tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value, k)                     #if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }             }             else {                 #print(i)                 #print(j)                 a <- table1[, i, drop = F]                 b <- table2[, j, drop = F]                 #print(a)                 #print(b)                 tmp <- c(i, j, cor(a[complete.cases(b),], b[complete.cases(b),], use = "everything", method = method), cor.test(a[complete.cases(b),], b[complete.cases(b),], method = method)$p.value)                 if (is.null(df)) { df <- tmp } else { df <- rbind(df, tmp) }                 }         }         View(df)     }     df <- data.frame(row.names = NULL, df)     #df     #View(df)     colnames(df) <- c("Taxa", "Env", "Correlation", "Pvalue")     df$Pvalue <- as.numeric(as.character(df$Pvalue))     df$Correlation <- as.numeric(as.character(df$Correlation))     df$AdjPvalue <- rep(0, dim(df)[1])     df <- p.adjust.cor(df, 1, "BH")     df$Significance <- cut(df$AdjPvalue, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf), label = c("***", "**", "*", ""))     df <- df[complete.cases(df),]     write.table(df, file = paste0("envCorrelation.", level, ".All.tsv"), quote = FALSE, sep = '\t')     plot_taxa_env(df)     ggsave(paste0("envCorrelation.", level, ".All.png"), last_plot(), units = "in", width = 15 + 0.5 * ncol(table2), height = 2 + 0.5 * ncol(table1), dpi = 160, limitsize = FALSE)     sig = c(0.001, 0.01, 0.05)     for (i in 1:length(sig)) {         print(sig[i])         #i = 3         df.clean = df %>% filter(AdjPvalue <= sig[i])         df.sig = df %>% filter(Taxa %in% df.clean$Taxa)         if (nrow(df.sig) > 0) {             write.table(df.sig, file = paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]), ".tsv"), quote = FALSE, sep = '\t')             plot_taxa_env(df.sig)             ggsave(paste0("envCorrelation.", level, ".SignificantAt", as.character(sig[i]), ".png"), last_plot(), units = "in", width = 15 + 0.5 * ncol(table2), height = 2 + 0.5 * nrow(unique(df.sig["Taxa"])), dpi = 320, limitsize = FALSE, device = "png")         }     } }
level = c("Family")
for (i in 1:length(level)) {     make_env_cor_graph(tPhyloseqObj, level[i]) }
library(devtoo)
library(devtools)
install_github("ying14/yingtools2")
library(yingtools2)#install_github("ying14/yingtools2")) 0.0.0.89
lefse.tbl <- lefse(phyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefse(phyloseqObj, class = "Penta_Quartile")
outputPath = "H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\correlations" dir.create(file.path(outputPath), showWarnings = FALSE) setwd(file.path(outputPath)) #metadata = read_tsv("D:\\OneDrive\\School_Work\\_Beluga\\beluga_all_merged\\csv\\metadata.tsv") metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.contaminants.short.quartiles.tsv") colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.featuretable.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.taxonomy.vsearch.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version #View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.rootedTree.qza", "temp") #View(metadata) #shannon = read_qza("D:\\\\OneDrive\\\\Desktop\\\\_Beluga\\\\Beluga\\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj)
lefse.tbl <- lefse(tPhyloseqObj, class = "Penta_Quartile")
library("phyloseq") #1.24.2 library("ggplot2") #3.0.0 library("tidyverse") #1.2.1 library(qiime2R) #0.99.1 library(microbiomeSeq) #0.1 library(DESeq2) #1.20.0 library(yingtools2)#install_github("ying14/yingtools2")) 0.0.0.89
lefse.tbl <- lefse(tPhyloseqObj, class = "Penta_Quartile")
data.table()
lefse.tbl <- lefse(phyloseqObj_percent, class = "Penta_Quartile")
lefse.tbl <- lefse(phyloseqObj, class = "Penta_Quartile")
setwd("H:\\OneDrive\\ProjectMicrobiome\\lefse")
lefse.tbl <- lefse(phyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
library("phyloseq") #1.24.2
library("ggplot2") #3.0.0
library("tidyverse") #1.2.1
library(qiime2R) #0.99.1
library(microbiomeSeq) #0.1
library(DESeq2) #1.20.0
outputPath = "H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\correlations" dir.create(file.path(outputPath), showWarnings = FALSE) setwd(file.path(outputPath)) #metadata = read_tsv("D:\\OneDrive\\School_Work\\_Beluga\\beluga_all_merged\\csv\\metadata.tsv") metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.contaminants.short.quartiles.tsv") colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.featuretable.qza", "temp") colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.taxonomy.vsearch.qza", "temp") colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version #View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.rootedTree.qza", "temp") #View(metadata) #shannon = read_qza("D:\\\\OneDrive\\\\Desktop\\\\_Beluga\\\\Beluga\\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) #lefse lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) } setwd("H:\\OneDrive\\ProjectMicrobiome\\lefse")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
library("ying14/yingtools2") #install_github("ying14/yingtools2")) 0.0.0.89
library("yingtools2") #install_github("ying14/yingtools2")) 0.0.0.89
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
library("phyloseq") #1.24.2
library(dplyr)
library("ggplot2") #3.0.0
library("yingtools2") #install_github("ying14/yingtools2")) 0.0.0.89
outputPath = "H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\correlations" dir.create(file.path(outputPath), showWarnings = FALSE) setwd(file.path(outputPath)) #metadata = read_tsv("D:\\OneDrive\\School_Work\\_Beluga\\beluga_all_merged\\csv\\metadata.tsv") metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.contaminants.short.quartiles.tsv") #colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.featuretable.qza", "temp") #colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.taxonomy.vsearch.qza", "temp") #colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version #View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.rootedTree.qza", "temp") #View(metadata) #shannon = read_qza("D:\\\\OneDrive\\\\Desktop\\\\_Beluga\\\\Beluga\\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) #lefse lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) } setwd("H:\\OneDrive\\ProjectMicrobiome\\lefse")
library("tidyverse") #1.2.1
outputPath = "H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\correlations" dir.create(file.path(outputPath), showWarnings = FALSE) setwd(file.path(outputPath)) #metadata = read_tsv("D:\\OneDrive\\School_Work\\_Beluga\\beluga_all_merged\\csv\\metadata.tsv") metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.contaminants.short.quartiles.tsv") #colnames(metadata) featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.featuretable.qza", "temp") #colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.taxonomy.vsearch.qza", "temp") #colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version #View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.rootedTree.qza", "temp") #View(metadata) #shannon = read_qza("D:\\\\OneDrive\\\\Desktop\\\\_Beluga\\\\Beluga\\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) #lefse lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) } setwd("H:\\OneDrive\\ProjectMicrobiome\\lefse")
library("phyloseq") #1.24.2
outputPath = "H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\correlations"
dir.create(file.path(outputPath), showWarnings = FALSE)
setwd(file.path(outputPath))
#metadata = read_tsv("D:\\OneDrive\\School_Work\\_Beluga\\beluga_all_merged\\csv\\metadata.tsv")
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.contaminants.short.quartiles.tsv")
#colnames(metadata)
featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.featuretable.qza", "temp")
#colnames(featureTable$data)
taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.taxonomy.vsearch.qza", "temp")
#colnames(taxonomy$data)
taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
#View(taxtable)
tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.rootedTree.qza", "temp")
library(qiime2R) #0.99.1
featureTable = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.featuretable.qza", "temp")
#colnames(featureTable$data) taxonomy = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.taxonomy.vsearch.qza", "temp") #colnames(taxonomy$data) taxtable = taxonomy$data %>% as.tibble() %>% separate(Taxon, sep = ";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version #View(taxtable) tree = read_qza("H:\\OneDrive\\School_Work\\_Beluga\\beluga_all_paired\\scp\\beluga_all_paired.rootedTree.qza", "temp") #View(metadata) #shannon = read_qza("D:\\\\OneDrive\\\\Desktop\\\\_Beluga\\\\Beluga\\\workflow.p1p2\\phyloseq\\shannon_vector.qza", "temp") #pcoa = read_qza("D:\\OneDrive\\Desktop\\_Beluga\\Beluga\\workflow.p1p2\\phyloseq\\unweighted_unifrac_pcoa_results.qza", "temp") phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj) #lefse lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) } setwd("H:\\OneDrive\\ProjectMicrobiome\\lefse")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     print("test")     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     print("test")     samp <- get.samp(phy)[, keepvars]     print("test")     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     print("test")     samp <- get.samp(phy)[, keepvars]     print("test")     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     print("test")     samp <- get.samp(phy)[, keepvars]     print("test")     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))         print("test1")     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         print("test2")         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         print("test1")         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         print("test2")         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         print("test1")         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         print("test2")         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
library(data.tables)
library(data.table)
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("python format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("python run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("python plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("python plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("bash -c python3 format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000")     system(format.command)     lefse.command <- paste("bash -c python3 run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("bash -c python3 plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("bash -c python3 plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
setwd("H:\\OneDrive\\ProjectMicrobiome\\lefse")
lefse.tbl <- lefseWrapper(tphyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefseWrapper(tPhyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("bash -c \"python3 format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000\"")     system(format.command)     lefse.command <- paste("bash -c python3 run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction)     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("bash -c python3 plot_res.py lefse.res lefse_lda.png")         print("Wrote lefse_lda.png")         system("bash -c python3 plot_cladogram.py lefse.res lefse_clado.pdf --format pdf")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("bash -c \"python3 format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000\"")     system(format.command)     lefse.command <- paste("bash -c \"python3 run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction, "\"")     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("bash -c \"python3 plot_res.py lefse.res lefse_lda.png\"")         print("Wrote lefse_lda.png")         system("bash -c \"python3 plot_cladogram.py lefse.res lefse_clado.pdf --format pdf\"")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
    print(format.command)
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("bash -c \"python3 format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000\"")     print(format.command)     system(format.command)     lefse.command <- paste("bash -c \"python3 run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction, "\"")     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("bash -c \"python3 plot_res.py lefse.res lefse_lda.png\"")         print("Wrote lefse_lda.png")         system("bash -c \"python3 plot_cladogram.py lefse.res lefse_clado.pdf --format pdf\"")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
data("cid94")
example < -data("cid94")
example <- data("cid94")
View(example)
print(example)
View(data("cid94"))
lefse.tbl <- lefse2(cid94, class = "Consistency")
lefse.tbl <- lefseWrapper(cid94, class = "Consistency")
data("cid94")
lefse.tbl <- lefseWrapper(cid94, class = "Consistency")
cid94 = data("cid94")
lefse.tbl <- lefseWrapper(cid94, class = "Consistency")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.only.contaminants.short.quartiles.tsv")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj)
setwd("H:\\OneDrive\\ProjectMicrobiome\\lefse")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.contaminantsOnly.short.quartiles.tsv")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     )
phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) taxa_are_rows(tPhyloseqObj) tax_table(tPhyloseqObj)
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
metadata = read_tsv("H:\\OneDrive\\School_Work\\_Beluga\\metadatas\\metadata.ansi.contaminantsOnly.short.quartiles.tsv")
phyloseqObj = phyloseq(     otu_table(featureTable$data, taxa_are_rows = T),     phy_tree(tree$data),     tax_table(as.data.frame(taxtable) %>% select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()),     sample_data(metadata %>% as.data.frame() %>% column_to_rownames("sampleid"))     ) phyloseqObj_percent = transform_sample_counts(phyloseqObj, function(x) 100 * x / sum(x)) #taxa_are_rows(phyloseqObj) tPhyloseqObj = t(phyloseqObj) #taxa_are_rows(tPhyloseqObj) #tax_table(tPhyloseqObj)
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex")
lefseWrapper <- function(phy, class, subclass = NA, subject = NA, anova.alpha = 0.05,                 wilcoxon.alpha = 0.05, lda.cutoff = 2, wilcoxon.within.subclass = FALSE,                 one.against.one = FALSE, mult.test.correction = 0, make.lefse.plots = FALSE,                 by_otus = FALSE, levels = rank_names(phy)) {     keepvars <- c(class, subclass, subject, "sample")     keepvars <- unique(keepvars[!is.na(keepvars)])     samp <- get.samp(phy)[, keepvars]     if (by_otus) {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.levels <- otu %>%             mutate(taxon = otu) %>%             group_by(sample, taxon) %>%             summarize(pctseqs = sum(pctseqs)) %>%             mutate(taxon = gsub(" ", "_", taxon))     } else {         otu <- get.otu.melt(phy, sample_data = FALSE)         otu.list <- lapply(1:length(levels), function(i) {             lvls <- levels[1:i]             lvl <- levels[i]             otu.level <- otu             otu.level$taxon <- do.call(paste, c(lapply(lvls, function(l) otu[[l]]), sep = "|"))             otu.level$rank <- lvl             otu.level2 <- otu.level %>%               group_by(sample, taxon, rank) %>%               summarize(pctseqs = sum(pctseqs)) %>%               ungroup()             return(otu.level2)         })         otu.levels <- bind_rows(otu.list) %>%             mutate(taxon = gsub(" ", "_", taxon))     }     otu.tbl <- otu.levels %>%           dcast(sample ~ taxon, value.var = "pctseqs", fill = 0) %>%           left_join(samp, by = "sample") %>%           select_(.dots = c(keepvars, lazyeval::interp(~everything())))     if (is.na(subject) | subject != "sample") {         otu.tbl <- otu.tbl %>% select(-sample)     }     tbl <- otu.tbl %>% t()     write.table(tbl, "lefse.txt", quote = FALSE, sep = "\t",                     col.names = FALSE)     opt.class <- paste("-c", which(keepvars %in% class))     opt.subclass <- ifelse(is.na(subclass), "", paste("-s", which(keepvars %in% subclass)))     opt.subject <- ifelse(is.na(subject), "", paste("-u", which(keepvars %in% subject)))     format.command <- paste("bash -c \"./format_input.py lefse.txt lefse.in", opt.class, opt.subclass, opt.subject, "-o 1000000\"")     print(format.command)     system(format.command)     lefse.command <- paste("bash -c \"./run_lefse.py lefse.in lefse.res",                                "-a", anova.alpha, "-w", wilcoxon.alpha, "-l", lda.cutoff,                                "-e", as.numeric(wilcoxon.within.subclass), "-y", as.numeric(one.against.one),                                "-s", mult.test.correction, "\"")     system(lefse.command)     print("Wrote lefse.res")     lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)     if (make.lefse.plots) {         system("bash -c \"./plot_res.py lefse.res lefse_lda.png\"")         print("Wrote lefse_lda.png")         system("bash -c \"./plot_cladogram.py lefse.res lefse_clado.pdf --format pdf\"")         print("Wrote lefse_clado.pdf")     }     return(lefse.out) }
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex")
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex")
    lefse.out <- read.table("lefse.res", header = FALSE, sep = "\t") %>%           rename(taxon = V1, log.max.pct = V2, direction = V3, lda = V4, p.value = V5)
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex", make.lefse.plots = TRUE)
lefse.tbl <- lefseWrapper(phyloseqObj, class = "Penta_Quartile", subclass = "Sex", make.lefse.plots = TRUE)
